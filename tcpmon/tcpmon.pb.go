// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: proto/tcpmon.proto

package tcpmon

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MetricType int32

const (
	MetricType_TCP MetricType = 0
	MetricType_NIC MetricType = 1
)

// Enum value maps for MetricType.
var (
	MetricType_name = map[int32]string{
		0: "TCP",
		1: "NIC",
	}
	MetricType_value = map[string]int32{
		"TCP": 0,
		"NIC": 1,
	}
)

func (x MetricType) Enum() *MetricType {
	p := new(MetricType)
	*p = x
	return p
}

func (x MetricType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_tcpmon_proto_enumTypes[0].Descriptor()
}

func (MetricType) Type() protoreflect.EnumType {
	return &file_proto_tcpmon_proto_enumTypes[0]
}

func (x MetricType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricType.Descriptor instead.
func (MetricType) EnumDescriptor() ([]byte, []int) {
	return file_proto_tcpmon_proto_rawDescGZIP(), []int{0}
}

// from linux/include/net/tcp_states.h
type SocketState int32

const (
	SocketState_TCP_ESTABLISHED  SocketState = 0
	SocketState_TCP_SYN_SENT     SocketState = 1
	SocketState_TCP_SYN_RECV     SocketState = 2
	SocketState_TCP_FIN_WAIT1    SocketState = 3
	SocketState_TCP_FIN_WAIT2    SocketState = 4
	SocketState_TCP_TIME_WAIT    SocketState = 5
	SocketState_TCP_CLOSE        SocketState = 6
	SocketState_TCP_CLOSE_WAIT   SocketState = 7
	SocketState_TCP_LAST_ACK     SocketState = 8
	SocketState_TCP_LISTEN       SocketState = 9
	SocketState_TCP_CLOSING      SocketState = 10
	SocketState_TCP_NEW_SYN_RECV SocketState = 11
)

// Enum value maps for SocketState.
var (
	SocketState_name = map[int32]string{
		0:  "TCP_ESTABLISHED",
		1:  "TCP_SYN_SENT",
		2:  "TCP_SYN_RECV",
		3:  "TCP_FIN_WAIT1",
		4:  "TCP_FIN_WAIT2",
		5:  "TCP_TIME_WAIT",
		6:  "TCP_CLOSE",
		7:  "TCP_CLOSE_WAIT",
		8:  "TCP_LAST_ACK",
		9:  "TCP_LISTEN",
		10: "TCP_CLOSING",
		11: "TCP_NEW_SYN_RECV",
	}
	SocketState_value = map[string]int32{
		"TCP_ESTABLISHED":  0,
		"TCP_SYN_SENT":     1,
		"TCP_SYN_RECV":     2,
		"TCP_FIN_WAIT1":    3,
		"TCP_FIN_WAIT2":    4,
		"TCP_TIME_WAIT":    5,
		"TCP_CLOSE":        6,
		"TCP_CLOSE_WAIT":   7,
		"TCP_LAST_ACK":     8,
		"TCP_LISTEN":       9,
		"TCP_CLOSING":      10,
		"TCP_NEW_SYN_RECV": 11,
	}
)

func (x SocketState) Enum() *SocketState {
	p := new(SocketState)
	*p = x
	return p
}

func (x SocketState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SocketState) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_tcpmon_proto_enumTypes[1].Descriptor()
}

func (SocketState) Type() protoreflect.EnumType {
	return &file_proto_tcpmon_proto_enumTypes[1]
}

func (x SocketState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SocketState.Descriptor instead.
func (SocketState) EnumDescriptor() ([]byte, []int) {
	return file_proto_tcpmon_proto_rawDescGZIP(), []int{1}
}

type SocketMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State     SocketState `protobuf:"varint,3,opt,name=state,proto3,enum=SocketState" json:"state,omitempty"`
	RecvQ     uint32      `protobuf:"varint,4,opt,name=recv_q,json=recvQ,proto3" json:"recv_q,omitempty"`
	SendQ     uint32      `protobuf:"varint,5,opt,name=send_q,json=sendQ,proto3" json:"send_q,omitempty"`
	LocalAddr string      `protobuf:"bytes,6,opt,name=local_addr,json=localAddr,proto3" json:"local_addr,omitempty"`
	PeerAddr  string      `protobuf:"bytes,7,opt,name=peer_addr,json=peerAddr,proto3" json:"peer_addr,omitempty"`
}

func (x *SocketMetric) Reset() {
	*x = SocketMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tcpmon_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocketMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocketMetric) ProtoMessage() {}

func (x *SocketMetric) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tcpmon_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocketMetric.ProtoReflect.Descriptor instead.
func (*SocketMetric) Descriptor() ([]byte, []int) {
	return file_proto_tcpmon_proto_rawDescGZIP(), []int{0}
}

func (x *SocketMetric) GetState() SocketState {
	if x != nil {
		return x.State
	}
	return SocketState_TCP_ESTABLISHED
}

func (x *SocketMetric) GetRecvQ() uint32 {
	if x != nil {
		return x.RecvQ
	}
	return 0
}

func (x *SocketMetric) GetSendQ() uint32 {
	if x != nil {
		return x.SendQ
	}
	return 0
}

func (x *SocketMetric) GetLocalAddr() string {
	if x != nil {
		return x.LocalAddr
	}
	return ""
}

func (x *SocketMetric) GetPeerAddr() string {
	if x != nil {
		return x.PeerAddr
	}
	return ""
}

type TcpMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// header
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Type      MetricType             `protobuf:"varint,2,opt,name=type,proto3,enum=MetricType" json:"type,omitempty"`
	// fields
	Sockets []*SocketMetric `protobuf:"bytes,3,rep,name=sockets,proto3" json:"sockets,omitempty"`
}

func (x *TcpMetric) Reset() {
	*x = TcpMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tcpmon_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcpMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpMetric) ProtoMessage() {}

func (x *TcpMetric) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tcpmon_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpMetric.ProtoReflect.Descriptor instead.
func (*TcpMetric) Descriptor() ([]byte, []int) {
	return file_proto_tcpmon_proto_rawDescGZIP(), []int{1}
}

func (x *TcpMetric) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *TcpMetric) GetType() MetricType {
	if x != nil {
		return x.Type
	}
	return MetricType_TCP
}

func (x *TcpMetric) GetSockets() []*SocketMetric {
	if x != nil {
		return x.Sockets
	}
	return nil
}

type IfaceMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RxErrors     uint32 `protobuf:"varint,2,opt,name=rx_errors,json=rxErrors,proto3" json:"rx_errors,omitempty"`
	RxDropped    uint32 `protobuf:"varint,3,opt,name=rx_dropped,json=rxDropped,proto3" json:"rx_dropped,omitempty"`
	RxOverruns   uint32 `protobuf:"varint,4,opt,name=rx_overruns,json=rxOverruns,proto3" json:"rx_overruns,omitempty"`
	RxFrame      uint32 `protobuf:"varint,5,opt,name=rx_frame,json=rxFrame,proto3" json:"rx_frame,omitempty"`
	TxErrors     uint32 `protobuf:"varint,6,opt,name=tx_errors,json=txErrors,proto3" json:"tx_errors,omitempty"`
	TxDropped    uint32 `protobuf:"varint,7,opt,name=tx_dropped,json=txDropped,proto3" json:"tx_dropped,omitempty"`
	TxOverruns   uint32 `protobuf:"varint,8,opt,name=tx_overruns,json=txOverruns,proto3" json:"tx_overruns,omitempty"`
	TxCarrier    uint32 `protobuf:"varint,9,opt,name=tx_carrier,json=txCarrier,proto3" json:"tx_carrier,omitempty"`
	TxCollisions uint32 `protobuf:"varint,10,opt,name=tx_collisions,json=txCollisions,proto3" json:"tx_collisions,omitempty"`
}

func (x *IfaceMetric) Reset() {
	*x = IfaceMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tcpmon_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IfaceMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IfaceMetric) ProtoMessage() {}

func (x *IfaceMetric) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tcpmon_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IfaceMetric.ProtoReflect.Descriptor instead.
func (*IfaceMetric) Descriptor() ([]byte, []int) {
	return file_proto_tcpmon_proto_rawDescGZIP(), []int{2}
}

func (x *IfaceMetric) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IfaceMetric) GetRxErrors() uint32 {
	if x != nil {
		return x.RxErrors
	}
	return 0
}

func (x *IfaceMetric) GetRxDropped() uint32 {
	if x != nil {
		return x.RxDropped
	}
	return 0
}

func (x *IfaceMetric) GetRxOverruns() uint32 {
	if x != nil {
		return x.RxOverruns
	}
	return 0
}

func (x *IfaceMetric) GetRxFrame() uint32 {
	if x != nil {
		return x.RxFrame
	}
	return 0
}

func (x *IfaceMetric) GetTxErrors() uint32 {
	if x != nil {
		return x.TxErrors
	}
	return 0
}

func (x *IfaceMetric) GetTxDropped() uint32 {
	if x != nil {
		return x.TxDropped
	}
	return 0
}

func (x *IfaceMetric) GetTxOverruns() uint32 {
	if x != nil {
		return x.TxOverruns
	}
	return 0
}

func (x *IfaceMetric) GetTxCarrier() uint32 {
	if x != nil {
		return x.TxCarrier
	}
	return 0
}

func (x *IfaceMetric) GetTxCollisions() uint32 {
	if x != nil {
		return x.TxCollisions
	}
	return 0
}

type NicMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// header
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Type      MetricType             `protobuf:"varint,2,opt,name=type,proto3,enum=MetricType" json:"type,omitempty"`
	// fields
	Ifaces []*IfaceMetric `protobuf:"bytes,3,rep,name=ifaces,proto3" json:"ifaces,omitempty"`
}

func (x *NicMetric) Reset() {
	*x = NicMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tcpmon_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NicMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NicMetric) ProtoMessage() {}

func (x *NicMetric) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tcpmon_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NicMetric.ProtoReflect.Descriptor instead.
func (*NicMetric) Descriptor() ([]byte, []int) {
	return file_proto_tcpmon_proto_rawDescGZIP(), []int{3}
}

func (x *NicMetric) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *NicMetric) GetType() MetricType {
	if x != nil {
		return x.Type
	}
	return MetricType_TCP
}

func (x *NicMetric) GetIfaces() []*IfaceMetric {
	if x != nil {
		return x.Ifaces
	}
	return nil
}

var File_proto_tcpmon_proto protoreflect.FileDescriptor

var file_proto_tcpmon_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x63, 0x70, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9c, 0x01, 0x0a, 0x0c, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x22, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65,
	0x63, 0x76, 0x5f, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x65, 0x63, 0x76,
	0x51, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x73, 0x65, 0x6e, 0x64, 0x51, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x22, 0x8f, 0x01, 0x0a, 0x09, 0x54, 0x63, 0x70, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a,
	0x07, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x22, 0xba, 0x02, 0x0a, 0x0b, 0x49, 0x66, 0x61, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x78,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72,
	0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x78, 0x5f, 0x64, 0x72,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x78, 0x44,
	0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x78, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x78, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x78, 0x5f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x78, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x78, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x78, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x78, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x78, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x12, 0x23,
	0x0a, 0x0d, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x09, 0x4e, 0x69, 0x63, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x06,
	0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x49,
	0x66, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x06, 0x69, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2a, 0x1e, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x07, 0x0a, 0x03, 0x54, 0x43, 0x50, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x49, 0x43,
	0x10, 0x01, 0x2a, 0xeb, 0x01, 0x0a, 0x0b, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x43, 0x50, 0x5f, 0x45, 0x53, 0x54, 0x41, 0x42, 0x4c,
	0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x43, 0x50, 0x5f, 0x53,
	0x59, 0x4e, 0x5f, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x43, 0x50,
	0x5f, 0x53, 0x59, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x56, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x54,
	0x43, 0x50, 0x5f, 0x46, 0x49, 0x4e, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x31, 0x10, 0x03, 0x12, 0x11,
	0x0a, 0x0d, 0x54, 0x43, 0x50, 0x5f, 0x46, 0x49, 0x4e, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x32, 0x10,
	0x04, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x43, 0x50, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x57, 0x41,
	0x49, 0x54, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x43, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x53,
	0x45, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x43, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45,
	0x5f, 0x57, 0x41, 0x49, 0x54, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x43, 0x50, 0x5f, 0x4c,
	0x41, 0x53, 0x54, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x43, 0x50,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x43, 0x50,
	0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x43,
	0x50, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x53, 0x59, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x56, 0x10, 0x0b,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_tcpmon_proto_rawDescOnce sync.Once
	file_proto_tcpmon_proto_rawDescData = file_proto_tcpmon_proto_rawDesc
)

func file_proto_tcpmon_proto_rawDescGZIP() []byte {
	file_proto_tcpmon_proto_rawDescOnce.Do(func() {
		file_proto_tcpmon_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_tcpmon_proto_rawDescData)
	})
	return file_proto_tcpmon_proto_rawDescData
}

var file_proto_tcpmon_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_tcpmon_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_proto_tcpmon_proto_goTypes = []interface{}{
	(MetricType)(0),               // 0: MetricType
	(SocketState)(0),              // 1: SocketState
	(*SocketMetric)(nil),          // 2: SocketMetric
	(*TcpMetric)(nil),             // 3: TcpMetric
	(*IfaceMetric)(nil),           // 4: IfaceMetric
	(*NicMetric)(nil),             // 5: NicMetric
	(*timestamppb.Timestamp)(nil), // 6: google.protobuf.Timestamp
}
var file_proto_tcpmon_proto_depIdxs = []int32{
	1, // 0: SocketMetric.state:type_name -> SocketState
	6, // 1: TcpMetric.timestamp:type_name -> google.protobuf.Timestamp
	0, // 2: TcpMetric.type:type_name -> MetricType
	2, // 3: TcpMetric.sockets:type_name -> SocketMetric
	6, // 4: NicMetric.timestamp:type_name -> google.protobuf.Timestamp
	0, // 5: NicMetric.type:type_name -> MetricType
	4, // 6: NicMetric.ifaces:type_name -> IfaceMetric
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_proto_tcpmon_proto_init() }
func file_proto_tcpmon_proto_init() {
	if File_proto_tcpmon_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_tcpmon_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SocketMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tcpmon_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcpMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tcpmon_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IfaceMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tcpmon_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NicMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_tcpmon_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_tcpmon_proto_goTypes,
		DependencyIndexes: file_proto_tcpmon_proto_depIdxs,
		EnumInfos:         file_proto_tcpmon_proto_enumTypes,
		MessageInfos:      file_proto_tcpmon_proto_msgTypes,
	}.Build()
	File_proto_tcpmon_proto = out.File
	file_proto_tcpmon_proto_rawDesc = nil
	file_proto_tcpmon_proto_goTypes = nil
	file_proto_tcpmon_proto_depIdxs = nil
}
