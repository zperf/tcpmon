// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.12.4
// source: proto/tcpmon.proto

package tcpmon

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MetricType int32

const (
	MetricType_TCP MetricType = 0
	MetricType_NIC MetricType = 1
	MetricType_NET MetricType = 2
)

// Enum value maps for MetricType.
var (
	MetricType_name = map[int32]string{
		0: "TCP",
		1: "NIC",
		2: "NET",
	}
	MetricType_value = map[string]int32{
		"TCP": 0,
		"NIC": 1,
		"NET": 2,
	}
)

func (x MetricType) Enum() *MetricType {
	p := new(MetricType)
	*p = x
	return p
}

func (x MetricType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_tcpmon_proto_enumTypes[0].Descriptor()
}

func (MetricType) Type() protoreflect.EnumType {
	return &file_proto_tcpmon_proto_enumTypes[0]
}

func (x MetricType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricType.Descriptor instead.
func (MetricType) EnumDescriptor() ([]byte, []int) {
	return file_proto_tcpmon_proto_rawDescGZIP(), []int{0}
}

// from linux/include/net/tcp_states.h
type SocketState int32

const (
	SocketState_TCP_ESTABLISHED  SocketState = 0
	SocketState_TCP_SYN_SENT     SocketState = 1
	SocketState_TCP_SYN_RECV     SocketState = 2
	SocketState_TCP_FIN_WAIT1    SocketState = 3
	SocketState_TCP_FIN_WAIT2    SocketState = 4
	SocketState_TCP_TIME_WAIT    SocketState = 5
	SocketState_TCP_CLOSE        SocketState = 6
	SocketState_TCP_CLOSE_WAIT   SocketState = 7
	SocketState_TCP_LAST_ACK     SocketState = 8
	SocketState_TCP_LISTEN       SocketState = 9
	SocketState_TCP_CLOSING      SocketState = 10
	SocketState_TCP_NEW_SYN_RECV SocketState = 11
)

// Enum value maps for SocketState.
var (
	SocketState_name = map[int32]string{
		0:  "TCP_ESTABLISHED",
		1:  "TCP_SYN_SENT",
		2:  "TCP_SYN_RECV",
		3:  "TCP_FIN_WAIT1",
		4:  "TCP_FIN_WAIT2",
		5:  "TCP_TIME_WAIT",
		6:  "TCP_CLOSE",
		7:  "TCP_CLOSE_WAIT",
		8:  "TCP_LAST_ACK",
		9:  "TCP_LISTEN",
		10: "TCP_CLOSING",
		11: "TCP_NEW_SYN_RECV",
	}
	SocketState_value = map[string]int32{
		"TCP_ESTABLISHED":  0,
		"TCP_SYN_SENT":     1,
		"TCP_SYN_RECV":     2,
		"TCP_FIN_WAIT1":    3,
		"TCP_FIN_WAIT2":    4,
		"TCP_TIME_WAIT":    5,
		"TCP_CLOSE":        6,
		"TCP_CLOSE_WAIT":   7,
		"TCP_LAST_ACK":     8,
		"TCP_LISTEN":       9,
		"TCP_CLOSING":      10,
		"TCP_NEW_SYN_RECV": 11,
	}
)

func (x SocketState) Enum() *SocketState {
	p := new(SocketState)
	*p = x
	return p
}

func (x SocketState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SocketState) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_tcpmon_proto_enumTypes[1].Descriptor()
}

func (SocketState) Type() protoreflect.EnumType {
	return &file_proto_tcpmon_proto_enumTypes[1]
}

func (x SocketState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SocketState.Descriptor instead.
func (SocketState) EnumDescriptor() ([]byte, []int) {
	return file_proto_tcpmon_proto_rawDescGZIP(), []int{1}
}

// Socket memory usage. aka skmem
// check: https://man7.org/linux/man-pages/man8/ss.8.html
type SocketMemoryUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RmemAlloc  uint32 `protobuf:"varint,1,opt,name=rmem_alloc,json=rmemAlloc,proto3" json:"rmem_alloc,omitempty"`    // the memory allocated for receiving packet
	RcvBuf     uint32 `protobuf:"varint,2,opt,name=rcv_buf,json=rcvBuf,proto3" json:"rcv_buf,omitempty"`             // the total memory can be allocated for receiving packet
	WmemAlloc  uint32 `protobuf:"varint,3,opt,name=wmem_alloc,json=wmemAlloc,proto3" json:"wmem_alloc,omitempty"`    // the memory used for sending packet (which has been sent to layer 3)
	SndBuf     uint32 `protobuf:"varint,4,opt,name=snd_buf,json=sndBuf,proto3" json:"snd_buf,omitempty"`             // the total memory can be allocated for sending packet
	FwdAlloc   uint32 `protobuf:"varint,5,opt,name=fwd_alloc,json=fwdAlloc,proto3" json:"fwd_alloc,omitempty"`       // the memory allocated by the socket as cache, but not used for receiving/sending packet yet.
	WmemQueued uint32 `protobuf:"varint,6,opt,name=wmem_queued,json=wmemQueued,proto3" json:"wmem_queued,omitempty"` // The memory allocated for sending packet (which has not been sent to layer 3)
	OptMem     uint32 `protobuf:"varint,7,opt,name=opt_mem,json=optMem,proto3" json:"opt_mem,omitempty"`             // The memory used for storing socket option, e.g., the key for TCP MD5 signature
	BackLog    uint32 `protobuf:"varint,8,opt,name=back_log,json=backLog,proto3" json:"back_log,omitempty"`          // The memory used for the sk backlog queue
	SockDrop   uint32 `protobuf:"varint,9,opt,name=sock_drop,json=sockDrop,proto3" json:"sock_drop,omitempty"`       // the number of packets dropped before they are de-multiplexed into the socket
}

func (x *SocketMemoryUsage) Reset() {
	*x = SocketMemoryUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tcpmon_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocketMemoryUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocketMemoryUsage) ProtoMessage() {}

func (x *SocketMemoryUsage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tcpmon_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocketMemoryUsage.ProtoReflect.Descriptor instead.
func (*SocketMemoryUsage) Descriptor() ([]byte, []int) {
	return file_proto_tcpmon_proto_rawDescGZIP(), []int{0}
}

func (x *SocketMemoryUsage) GetRmemAlloc() uint32 {
	if x != nil {
		return x.RmemAlloc
	}
	return 0
}

func (x *SocketMemoryUsage) GetRcvBuf() uint32 {
	if x != nil {
		return x.RcvBuf
	}
	return 0
}

func (x *SocketMemoryUsage) GetWmemAlloc() uint32 {
	if x != nil {
		return x.WmemAlloc
	}
	return 0
}

func (x *SocketMemoryUsage) GetSndBuf() uint32 {
	if x != nil {
		return x.SndBuf
	}
	return 0
}

func (x *SocketMemoryUsage) GetFwdAlloc() uint32 {
	if x != nil {
		return x.FwdAlloc
	}
	return 0
}

func (x *SocketMemoryUsage) GetWmemQueued() uint32 {
	if x != nil {
		return x.WmemQueued
	}
	return 0
}

func (x *SocketMemoryUsage) GetOptMem() uint32 {
	if x != nil {
		return x.OptMem
	}
	return 0
}

func (x *SocketMemoryUsage) GetBackLog() uint32 {
	if x != nil {
		return x.BackLog
	}
	return 0
}

func (x *SocketMemoryUsage) GetSockDrop() uint32 {
	if x != nil {
		return x.SockDrop
	}
	return 0
}

type TimerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // the name of timer
	ExpireTimeSec uint32 `protobuf:"varint,2,opt,name=expire_time_sec,json=expireTimeSec,proto3" json:"expire_time_sec,omitempty"`
	Retrans       uint32 `protobuf:"varint,3,opt,name=retrans,proto3" json:"retrans,omitempty"`
}

func (x *TimerInfo) Reset() {
	*x = TimerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tcpmon_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimerInfo) ProtoMessage() {}

func (x *TimerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tcpmon_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimerInfo.ProtoReflect.Descriptor instead.
func (*TimerInfo) Descriptor() ([]byte, []int) {
	return file_proto_tcpmon_proto_rawDescGZIP(), []int{1}
}

func (x *TimerInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TimerInfo) GetExpireTimeSec() uint32 {
	if x != nil {
		return x.ExpireTimeSec
	}
	return 0
}

func (x *TimerInfo) GetRetrans() uint32 {
	if x != nil {
		return x.Retrans
	}
	return 0
}

type SocketMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State         SocketState        `protobuf:"varint,3,opt,name=state,proto3,enum=SocketState" json:"state,omitempty"`
	RecvQ         uint32             `protobuf:"varint,4,opt,name=recv_q,json=recvQ,proto3" json:"recv_q,omitempty"`
	SendQ         uint32             `protobuf:"varint,5,opt,name=send_q,json=sendQ,proto3" json:"send_q,omitempty"`
	LocalAddr     string             `protobuf:"bytes,6,opt,name=local_addr,json=localAddr,proto3" json:"local_addr,omitempty"`
	PeerAddr      string             `protobuf:"bytes,7,opt,name=peer_addr,json=peerAddr,proto3" json:"peer_addr,omitempty"`
	Timers        []*TimerInfo       `protobuf:"bytes,8,rep,name=timers,proto3" json:"timers,omitempty"`
	Skmem         *SocketMemoryUsage `protobuf:"bytes,9,opt,name=skmem,proto3" json:"skmem,omitempty"`
	Ts            bool               `protobuf:"varint,10,opt,name=ts,proto3" json:"ts,omitempty"`
	Sack          bool               `protobuf:"varint,11,opt,name=sack,proto3" json:"sack,omitempty"`
	Cubic         bool               `protobuf:"varint,12,opt,name=cubic,proto3" json:"cubic,omitempty"`
	AppLimited    bool               `protobuf:"varint,13,opt,name=app_limited,json=appLimited,proto3" json:"app_limited,omitempty"`
	PacingRate    uint64             `protobuf:"varint,14,opt,name=pacing_rate,json=pacingRate,proto3" json:"pacing_rate,omitempty"`
	DeliveryRate  uint64             `protobuf:"varint,15,opt,name=delivery_rate,json=deliveryRate,proto3" json:"delivery_rate,omitempty"`
	Send          uint64             `protobuf:"varint,16,opt,name=send,proto3" json:"send,omitempty"`
	SndWscale     uint32             `protobuf:"varint,17,opt,name=snd_wscale,json=sndWscale,proto3" json:"snd_wscale,omitempty"` // window scaling
	RcvWscale     uint32             `protobuf:"varint,18,opt,name=rcv_wscale,json=rcvWscale,proto3" json:"rcv_wscale,omitempty"`
	Rto           float64            `protobuf:"fixed64,19,opt,name=rto,proto3" json:"rto,omitempty"`
	Rtt           float64            `protobuf:"fixed64,20,opt,name=rtt,proto3" json:"rtt,omitempty"`
	Rttvar        float64            `protobuf:"fixed64,21,opt,name=rttvar,proto3" json:"rttvar,omitempty"`
	Minrtt        float64            `protobuf:"fixed64,22,opt,name=minrtt,proto3" json:"minrtt,omitempty"`
	RcvRtt        float64            `protobuf:"fixed64,23,opt,name=rcv_rtt,json=rcvRtt,proto3" json:"rcv_rtt,omitempty"`
	RetransNow    uint32             `protobuf:"varint,24,opt,name=retrans_now,json=retransNow,proto3" json:"retrans_now,omitempty"`
	RetransTotal  uint32             `protobuf:"varint,25,opt,name=retrans_total,json=retransTotal,proto3" json:"retrans_total,omitempty"`
	Ato           uint32             `protobuf:"varint,30,opt,name=ato,proto3" json:"ato,omitempty"`
	Mss           uint32             `protobuf:"varint,31,opt,name=mss,proto3" json:"mss,omitempty"`
	Pmtu          uint32             `protobuf:"varint,32,opt,name=pmtu,proto3" json:"pmtu,omitempty"`
	Rcvmss        uint32             `protobuf:"varint,33,opt,name=rcvmss,proto3" json:"rcvmss,omitempty"`
	Advmss        uint32             `protobuf:"varint,34,opt,name=advmss,proto3" json:"advmss,omitempty"`
	Cwnd          uint32             `protobuf:"varint,35,opt,name=cwnd,proto3" json:"cwnd,omitempty"`
	SndWnd        uint32             `protobuf:"varint,36,opt,name=snd_wnd,json=sndWnd,proto3" json:"snd_wnd,omitempty"`
	BytesSent     uint32             `protobuf:"varint,37,opt,name=bytes_sent,json=bytesSent,proto3" json:"bytes_sent,omitempty"`
	BytesAcked    uint32             `protobuf:"varint,38,opt,name=bytes_acked,json=bytesAcked,proto3" json:"bytes_acked,omitempty"`
	BytesReceived uint32             `protobuf:"varint,39,opt,name=bytes_received,json=bytesReceived,proto3" json:"bytes_received,omitempty"`
	SegsOut       uint32             `protobuf:"varint,40,opt,name=segs_out,json=segsOut,proto3" json:"segs_out,omitempty"`
	SegsIn        uint32             `protobuf:"varint,41,opt,name=segs_in,json=segsIn,proto3" json:"segs_in,omitempty"`
	Lastsnd       uint32             `protobuf:"varint,42,opt,name=lastsnd,proto3" json:"lastsnd,omitempty"`
	Lastrcv       uint32             `protobuf:"varint,43,opt,name=lastrcv,proto3" json:"lastrcv,omitempty"`
	Lastack       uint32             `protobuf:"varint,44,opt,name=lastack,proto3" json:"lastack,omitempty"`
	Delivered     uint32             `protobuf:"varint,45,opt,name=delivered,proto3" json:"delivered,omitempty"`
	BusyMs        uint32             `protobuf:"varint,46,opt,name=busy_ms,json=busyMs,proto3" json:"busy_ms,omitempty"`
	RcvSpace      uint32             `protobuf:"varint,47,opt,name=rcv_space,json=rcvSpace,proto3" json:"rcv_space,omitempty"`
	RcvSsthresh   uint32             `protobuf:"varint,48,opt,name=rcv_ssthresh,json=rcvSsthresh,proto3" json:"rcv_ssthresh,omitempty"`
	DataSegsOut   uint32             `protobuf:"varint,49,opt,name=data_segs_out,json=dataSegsOut,proto3" json:"data_segs_out,omitempty"`
	DataSegsIn    uint32             `protobuf:"varint,50,opt,name=data_segs_in,json=dataSegsIn,proto3" json:"data_segs_in,omitempty"`
}

func (x *SocketMetric) Reset() {
	*x = SocketMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tcpmon_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocketMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocketMetric) ProtoMessage() {}

func (x *SocketMetric) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tcpmon_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocketMetric.ProtoReflect.Descriptor instead.
func (*SocketMetric) Descriptor() ([]byte, []int) {
	return file_proto_tcpmon_proto_rawDescGZIP(), []int{2}
}

func (x *SocketMetric) GetState() SocketState {
	if x != nil {
		return x.State
	}
	return SocketState_TCP_ESTABLISHED
}

func (x *SocketMetric) GetRecvQ() uint32 {
	if x != nil {
		return x.RecvQ
	}
	return 0
}

func (x *SocketMetric) GetSendQ() uint32 {
	if x != nil {
		return x.SendQ
	}
	return 0
}

func (x *SocketMetric) GetLocalAddr() string {
	if x != nil {
		return x.LocalAddr
	}
	return ""
}

func (x *SocketMetric) GetPeerAddr() string {
	if x != nil {
		return x.PeerAddr
	}
	return ""
}

func (x *SocketMetric) GetTimers() []*TimerInfo {
	if x != nil {
		return x.Timers
	}
	return nil
}

func (x *SocketMetric) GetSkmem() *SocketMemoryUsage {
	if x != nil {
		return x.Skmem
	}
	return nil
}

func (x *SocketMetric) GetTs() bool {
	if x != nil {
		return x.Ts
	}
	return false
}

func (x *SocketMetric) GetSack() bool {
	if x != nil {
		return x.Sack
	}
	return false
}

func (x *SocketMetric) GetCubic() bool {
	if x != nil {
		return x.Cubic
	}
	return false
}

func (x *SocketMetric) GetAppLimited() bool {
	if x != nil {
		return x.AppLimited
	}
	return false
}

func (x *SocketMetric) GetPacingRate() uint64 {
	if x != nil {
		return x.PacingRate
	}
	return 0
}

func (x *SocketMetric) GetDeliveryRate() uint64 {
	if x != nil {
		return x.DeliveryRate
	}
	return 0
}

func (x *SocketMetric) GetSend() uint64 {
	if x != nil {
		return x.Send
	}
	return 0
}

func (x *SocketMetric) GetSndWscale() uint32 {
	if x != nil {
		return x.SndWscale
	}
	return 0
}

func (x *SocketMetric) GetRcvWscale() uint32 {
	if x != nil {
		return x.RcvWscale
	}
	return 0
}

func (x *SocketMetric) GetRto() float64 {
	if x != nil {
		return x.Rto
	}
	return 0
}

func (x *SocketMetric) GetRtt() float64 {
	if x != nil {
		return x.Rtt
	}
	return 0
}

func (x *SocketMetric) GetRttvar() float64 {
	if x != nil {
		return x.Rttvar
	}
	return 0
}

func (x *SocketMetric) GetMinrtt() float64 {
	if x != nil {
		return x.Minrtt
	}
	return 0
}

func (x *SocketMetric) GetRcvRtt() float64 {
	if x != nil {
		return x.RcvRtt
	}
	return 0
}

func (x *SocketMetric) GetRetransNow() uint32 {
	if x != nil {
		return x.RetransNow
	}
	return 0
}

func (x *SocketMetric) GetRetransTotal() uint32 {
	if x != nil {
		return x.RetransTotal
	}
	return 0
}

func (x *SocketMetric) GetAto() uint32 {
	if x != nil {
		return x.Ato
	}
	return 0
}

func (x *SocketMetric) GetMss() uint32 {
	if x != nil {
		return x.Mss
	}
	return 0
}

func (x *SocketMetric) GetPmtu() uint32 {
	if x != nil {
		return x.Pmtu
	}
	return 0
}

func (x *SocketMetric) GetRcvmss() uint32 {
	if x != nil {
		return x.Rcvmss
	}
	return 0
}

func (x *SocketMetric) GetAdvmss() uint32 {
	if x != nil {
		return x.Advmss
	}
	return 0
}

func (x *SocketMetric) GetCwnd() uint32 {
	if x != nil {
		return x.Cwnd
	}
	return 0
}

func (x *SocketMetric) GetSndWnd() uint32 {
	if x != nil {
		return x.SndWnd
	}
	return 0
}

func (x *SocketMetric) GetBytesSent() uint32 {
	if x != nil {
		return x.BytesSent
	}
	return 0
}

func (x *SocketMetric) GetBytesAcked() uint32 {
	if x != nil {
		return x.BytesAcked
	}
	return 0
}

func (x *SocketMetric) GetBytesReceived() uint32 {
	if x != nil {
		return x.BytesReceived
	}
	return 0
}

func (x *SocketMetric) GetSegsOut() uint32 {
	if x != nil {
		return x.SegsOut
	}
	return 0
}

func (x *SocketMetric) GetSegsIn() uint32 {
	if x != nil {
		return x.SegsIn
	}
	return 0
}

func (x *SocketMetric) GetLastsnd() uint32 {
	if x != nil {
		return x.Lastsnd
	}
	return 0
}

func (x *SocketMetric) GetLastrcv() uint32 {
	if x != nil {
		return x.Lastrcv
	}
	return 0
}

func (x *SocketMetric) GetLastack() uint32 {
	if x != nil {
		return x.Lastack
	}
	return 0
}

func (x *SocketMetric) GetDelivered() uint32 {
	if x != nil {
		return x.Delivered
	}
	return 0
}

func (x *SocketMetric) GetBusyMs() uint32 {
	if x != nil {
		return x.BusyMs
	}
	return 0
}

func (x *SocketMetric) GetRcvSpace() uint32 {
	if x != nil {
		return x.RcvSpace
	}
	return 0
}

func (x *SocketMetric) GetRcvSsthresh() uint32 {
	if x != nil {
		return x.RcvSsthresh
	}
	return 0
}

func (x *SocketMetric) GetDataSegsOut() uint32 {
	if x != nil {
		return x.DataSegsOut
	}
	return 0
}

func (x *SocketMetric) GetDataSegsIn() uint32 {
	if x != nil {
		return x.DataSegsIn
	}
	return 0
}

type TcpMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// header
	Timestamp *timestamp.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Type      MetricType           `protobuf:"varint,2,opt,name=type,proto3,enum=MetricType" json:"type,omitempty"`
	// fields
	Sockets []*SocketMetric `protobuf:"bytes,3,rep,name=sockets,proto3" json:"sockets,omitempty"`
}

func (x *TcpMetric) Reset() {
	*x = TcpMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tcpmon_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcpMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpMetric) ProtoMessage() {}

func (x *TcpMetric) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tcpmon_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpMetric.ProtoReflect.Descriptor instead.
func (*TcpMetric) Descriptor() ([]byte, []int) {
	return file_proto_tcpmon_proto_rawDescGZIP(), []int{3}
}

func (x *TcpMetric) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *TcpMetric) GetType() MetricType {
	if x != nil {
		return x.Type
	}
	return MetricType_TCP
}

func (x *TcpMetric) GetSockets() []*SocketMetric {
	if x != nil {
		return x.Sockets
	}
	return nil
}

type IfaceMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RxErrors     uint32 `protobuf:"varint,2,opt,name=rx_errors,json=rxErrors,proto3" json:"rx_errors,omitempty"`
	RxDropped    uint32 `protobuf:"varint,3,opt,name=rx_dropped,json=rxDropped,proto3" json:"rx_dropped,omitempty"`
	RxOverruns   uint32 `protobuf:"varint,4,opt,name=rx_overruns,json=rxOverruns,proto3" json:"rx_overruns,omitempty"`
	RxFrame      uint32 `protobuf:"varint,5,opt,name=rx_frame,json=rxFrame,proto3" json:"rx_frame,omitempty"`
	TxErrors     uint32 `protobuf:"varint,6,opt,name=tx_errors,json=txErrors,proto3" json:"tx_errors,omitempty"`
	TxDropped    uint32 `protobuf:"varint,7,opt,name=tx_dropped,json=txDropped,proto3" json:"tx_dropped,omitempty"`
	TxOverruns   uint32 `protobuf:"varint,8,opt,name=tx_overruns,json=txOverruns,proto3" json:"tx_overruns,omitempty"`
	TxCarrier    uint32 `protobuf:"varint,9,opt,name=tx_carrier,json=txCarrier,proto3" json:"tx_carrier,omitempty"`
	TxCollisions uint32 `protobuf:"varint,10,opt,name=tx_collisions,json=txCollisions,proto3" json:"tx_collisions,omitempty"`
}

func (x *IfaceMetric) Reset() {
	*x = IfaceMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tcpmon_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IfaceMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IfaceMetric) ProtoMessage() {}

func (x *IfaceMetric) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tcpmon_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IfaceMetric.ProtoReflect.Descriptor instead.
func (*IfaceMetric) Descriptor() ([]byte, []int) {
	return file_proto_tcpmon_proto_rawDescGZIP(), []int{4}
}

func (x *IfaceMetric) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IfaceMetric) GetRxErrors() uint32 {
	if x != nil {
		return x.RxErrors
	}
	return 0
}

func (x *IfaceMetric) GetRxDropped() uint32 {
	if x != nil {
		return x.RxDropped
	}
	return 0
}

func (x *IfaceMetric) GetRxOverruns() uint32 {
	if x != nil {
		return x.RxOverruns
	}
	return 0
}

func (x *IfaceMetric) GetRxFrame() uint32 {
	if x != nil {
		return x.RxFrame
	}
	return 0
}

func (x *IfaceMetric) GetTxErrors() uint32 {
	if x != nil {
		return x.TxErrors
	}
	return 0
}

func (x *IfaceMetric) GetTxDropped() uint32 {
	if x != nil {
		return x.TxDropped
	}
	return 0
}

func (x *IfaceMetric) GetTxOverruns() uint32 {
	if x != nil {
		return x.TxOverruns
	}
	return 0
}

func (x *IfaceMetric) GetTxCarrier() uint32 {
	if x != nil {
		return x.TxCarrier
	}
	return 0
}

func (x *IfaceMetric) GetTxCollisions() uint32 {
	if x != nil {
		return x.TxCollisions
	}
	return 0
}

type NicMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// header
	Timestamp *timestamp.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Type      MetricType           `protobuf:"varint,2,opt,name=type,proto3,enum=MetricType" json:"type,omitempty"`
	// fields
	Ifaces []*IfaceMetric `protobuf:"bytes,3,rep,name=ifaces,proto3" json:"ifaces,omitempty"`
}

func (x *NicMetric) Reset() {
	*x = NicMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tcpmon_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NicMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NicMetric) ProtoMessage() {}

func (x *NicMetric) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tcpmon_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NicMetric.ProtoReflect.Descriptor instead.
func (*NicMetric) Descriptor() ([]byte, []int) {
	return file_proto_tcpmon_proto_rawDescGZIP(), []int{5}
}

func (x *NicMetric) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *NicMetric) GetType() MetricType {
	if x != nil {
		return x.Type
	}
	return MetricType_TCP
}

func (x *NicMetric) GetIfaces() []*IfaceMetric {
	if x != nil {
		return x.Ifaces
	}
	return nil
}

type NetstatMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// header
	Timestamp *timestamp.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Type      MetricType           `protobuf:"varint,2,opt,name=type,proto3,enum=MetricType" json:"type,omitempty"`
	// fields
	IpTotalPacketsReceived          uint32 `protobuf:"varint,3,opt,name=ip_total_packets_received,json=ipTotalPacketsReceived,proto3" json:"ip_total_packets_received,omitempty"`
	IpForwarded                     uint32 `protobuf:"varint,4,opt,name=ip_forwarded,json=ipForwarded,proto3" json:"ip_forwarded,omitempty"`
	IpIncomingPacketsDiscarded      uint32 `protobuf:"varint,5,opt,name=ip_incoming_packets_discarded,json=ipIncomingPacketsDiscarded,proto3" json:"ip_incoming_packets_discarded,omitempty"`
	IpIncomingPacketsDelivered      uint32 `protobuf:"varint,6,opt,name=ip_incoming_packets_delivered,json=ipIncomingPacketsDelivered,proto3" json:"ip_incoming_packets_delivered,omitempty"`
	IpRequestsSentOut               uint32 `protobuf:"varint,7,opt,name=ip_requests_sent_out,json=ipRequestsSentOut,proto3" json:"ip_requests_sent_out,omitempty"`
	IpOutgoingPacketsDropped        uint32 `protobuf:"varint,8,opt,name=ip_outgoing_packets_dropped,json=ipOutgoingPacketsDropped,proto3" json:"ip_outgoing_packets_dropped,omitempty"`
	TcpActiveConnectionsOpenings    uint32 `protobuf:"varint,9,opt,name=tcp_active_connections_openings,json=tcpActiveConnectionsOpenings,proto3" json:"tcp_active_connections_openings,omitempty"`
	TcpPassiveConnectionOpenings    uint32 `protobuf:"varint,10,opt,name=tcp_passive_connection_openings,json=tcpPassiveConnectionOpenings,proto3" json:"tcp_passive_connection_openings,omitempty"`
	TcpFailedConnectionAttempts     uint32 `protobuf:"varint,11,opt,name=tcp_failed_connection_attempts,json=tcpFailedConnectionAttempts,proto3" json:"tcp_failed_connection_attempts,omitempty"`
	TcpConnectionResetsReceived     uint32 `protobuf:"varint,12,opt,name=tcp_connection_resets_received,json=tcpConnectionResetsReceived,proto3" json:"tcp_connection_resets_received,omitempty"`
	TcpConnectionsEstablished       uint32 `protobuf:"varint,13,opt,name=tcp_connections_established,json=tcpConnectionsEstablished,proto3" json:"tcp_connections_established,omitempty"`
	TcpSegmentsReceived             uint32 `protobuf:"varint,14,opt,name=tcp_segments_received,json=tcpSegmentsReceived,proto3" json:"tcp_segments_received,omitempty"`
	TcpSegmentsSendOut              uint32 `protobuf:"varint,15,opt,name=tcp_segments_send_out,json=tcpSegmentsSendOut,proto3" json:"tcp_segments_send_out,omitempty"`
	TcpSegmentsRetransmitted        uint32 `protobuf:"varint,16,opt,name=tcp_segments_retransmitted,json=tcpSegmentsRetransmitted,proto3" json:"tcp_segments_retransmitted,omitempty"`
	TcpBadSegmentsReceived          uint32 `protobuf:"varint,17,opt,name=tcp_bad_segments_received,json=tcpBadSegmentsReceived,proto3" json:"tcp_bad_segments_received,omitempty"`
	TcpResetsSent                   uint32 `protobuf:"varint,18,opt,name=tcp_resets_sent,json=tcpResetsSent,proto3" json:"tcp_resets_sent,omitempty"`
	UdpPacketsReceived              uint32 `protobuf:"varint,19,opt,name=udp_packets_received,json=udpPacketsReceived,proto3" json:"udp_packets_received,omitempty"`
	UdpPacketsToUnknownPortReceived uint32 `protobuf:"varint,20,opt,name=udp_packets_to_unknown_port_received,json=udpPacketsToUnknownPortReceived,proto3" json:"udp_packets_to_unknown_port_received,omitempty"`
	UdpPacketReceiveErrors          uint32 `protobuf:"varint,21,opt,name=udp_packet_receive_errors,json=udpPacketReceiveErrors,proto3" json:"udp_packet_receive_errors,omitempty"`
	UdpPacketsSent                  uint32 `protobuf:"varint,22,opt,name=udp_packets_sent,json=udpPacketsSent,proto3" json:"udp_packets_sent,omitempty"`
	UdpReceiveBufferErrors          uint32 `protobuf:"varint,23,opt,name=udp_receive_buffer_errors,json=udpReceiveBufferErrors,proto3" json:"udp_receive_buffer_errors,omitempty"`
	UdpSendBufferErrors             uint32 `protobuf:"varint,24,opt,name=udp_send_buffer_errors,json=udpSendBufferErrors,proto3" json:"udp_send_buffer_errors,omitempty"`
}

func (x *NetstatMetric) Reset() {
	*x = NetstatMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tcpmon_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetstatMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetstatMetric) ProtoMessage() {}

func (x *NetstatMetric) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tcpmon_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetstatMetric.ProtoReflect.Descriptor instead.
func (*NetstatMetric) Descriptor() ([]byte, []int) {
	return file_proto_tcpmon_proto_rawDescGZIP(), []int{6}
}

func (x *NetstatMetric) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *NetstatMetric) GetType() MetricType {
	if x != nil {
		return x.Type
	}
	return MetricType_TCP
}

func (x *NetstatMetric) GetIpTotalPacketsReceived() uint32 {
	if x != nil {
		return x.IpTotalPacketsReceived
	}
	return 0
}

func (x *NetstatMetric) GetIpForwarded() uint32 {
	if x != nil {
		return x.IpForwarded
	}
	return 0
}

func (x *NetstatMetric) GetIpIncomingPacketsDiscarded() uint32 {
	if x != nil {
		return x.IpIncomingPacketsDiscarded
	}
	return 0
}

func (x *NetstatMetric) GetIpIncomingPacketsDelivered() uint32 {
	if x != nil {
		return x.IpIncomingPacketsDelivered
	}
	return 0
}

func (x *NetstatMetric) GetIpRequestsSentOut() uint32 {
	if x != nil {
		return x.IpRequestsSentOut
	}
	return 0
}

func (x *NetstatMetric) GetIpOutgoingPacketsDropped() uint32 {
	if x != nil {
		return x.IpOutgoingPacketsDropped
	}
	return 0
}

func (x *NetstatMetric) GetTcpActiveConnectionsOpenings() uint32 {
	if x != nil {
		return x.TcpActiveConnectionsOpenings
	}
	return 0
}

func (x *NetstatMetric) GetTcpPassiveConnectionOpenings() uint32 {
	if x != nil {
		return x.TcpPassiveConnectionOpenings
	}
	return 0
}

func (x *NetstatMetric) GetTcpFailedConnectionAttempts() uint32 {
	if x != nil {
		return x.TcpFailedConnectionAttempts
	}
	return 0
}

func (x *NetstatMetric) GetTcpConnectionResetsReceived() uint32 {
	if x != nil {
		return x.TcpConnectionResetsReceived
	}
	return 0
}

func (x *NetstatMetric) GetTcpConnectionsEstablished() uint32 {
	if x != nil {
		return x.TcpConnectionsEstablished
	}
	return 0
}

func (x *NetstatMetric) GetTcpSegmentsReceived() uint32 {
	if x != nil {
		return x.TcpSegmentsReceived
	}
	return 0
}

func (x *NetstatMetric) GetTcpSegmentsSendOut() uint32 {
	if x != nil {
		return x.TcpSegmentsSendOut
	}
	return 0
}

func (x *NetstatMetric) GetTcpSegmentsRetransmitted() uint32 {
	if x != nil {
		return x.TcpSegmentsRetransmitted
	}
	return 0
}

func (x *NetstatMetric) GetTcpBadSegmentsReceived() uint32 {
	if x != nil {
		return x.TcpBadSegmentsReceived
	}
	return 0
}

func (x *NetstatMetric) GetTcpResetsSent() uint32 {
	if x != nil {
		return x.TcpResetsSent
	}
	return 0
}

func (x *NetstatMetric) GetUdpPacketsReceived() uint32 {
	if x != nil {
		return x.UdpPacketsReceived
	}
	return 0
}

func (x *NetstatMetric) GetUdpPacketsToUnknownPortReceived() uint32 {
	if x != nil {
		return x.UdpPacketsToUnknownPortReceived
	}
	return 0
}

func (x *NetstatMetric) GetUdpPacketReceiveErrors() uint32 {
	if x != nil {
		return x.UdpPacketReceiveErrors
	}
	return 0
}

func (x *NetstatMetric) GetUdpPacketsSent() uint32 {
	if x != nil {
		return x.UdpPacketsSent
	}
	return 0
}

func (x *NetstatMetric) GetUdpReceiveBufferErrors() uint32 {
	if x != nil {
		return x.UdpReceiveBufferErrors
	}
	return 0
}

func (x *NetstatMetric) GetUdpSendBufferErrors() uint32 {
	if x != nil {
		return x.UdpSendBufferErrors
	}
	return 0
}

var File_proto_tcpmon_proto protoreflect.FileDescriptor

var file_proto_tcpmon_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x63, 0x70, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x92, 0x02, 0x0a, 0x11, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x6d, 0x65, 0x6d, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x72, 0x6d, 0x65, 0x6d, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x63,
	0x76, 0x5f, 0x62, 0x75, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x63, 0x76,
	0x42, 0x75, 0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x6d, 0x65, 0x6d, 0x5f, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x77, 0x6d, 0x65, 0x6d, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6e, 0x64, 0x5f, 0x62, 0x75, 0x66, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6e, 0x64, 0x42, 0x75, 0x66, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x77, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x66, 0x77, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6d, 0x65, 0x6d,
	0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x77,
	0x6d, 0x65, 0x6d, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x74,
	0x5f, 0x6d, 0x65, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x4d,
	0x65, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x4c, 0x6f, 0x67, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x73, 0x6f, 0x63, 0x6b, 0x44, 0x72, 0x6f, 0x70, 0x22, 0x61, 0x0a, 0x09, 0x54, 0x69,
	0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x22, 0xcb, 0x09,
	0x0a, 0x0c, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x22,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x71, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x72, 0x65, 0x63, 0x76, 0x51, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x65, 0x6e, 0x64, 0x51,
	0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x22, 0x0a, 0x06,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73,
	0x12, 0x28, 0x0a, 0x05, 0x73, 0x6b, 0x6d, 0x65, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x05, 0x73, 0x6b, 0x6d, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61,
	0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x61, 0x63, 0x6b, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x75, 0x62, 0x69, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x63,
	0x75, 0x62, 0x69, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x69,
	0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x65, 0x6e, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x6e, 0x64, 0x5f, 0x77, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x6e, 0x64, 0x57, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x63, 0x76, 0x5f, 0x77, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x72, 0x63, 0x76, 0x57, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x74, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x72, 0x74, 0x6f, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x74, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x72, 0x74,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x74, 0x74, 0x76, 0x61, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x72, 0x74, 0x74, 0x76, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e,
	0x72, 0x74, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x72, 0x74,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x63, 0x76, 0x5f, 0x72, 0x74, 0x74, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x72, 0x63, 0x76, 0x52, 0x74, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x6e, 0x6f, 0x77, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x4e, 0x6f, 0x77, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x74, 0x6f, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x61,
	0x74, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6d, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6d, 0x74, 0x75, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x70, 0x6d, 0x74, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x63, 0x76, 0x6d,
	0x73, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x63, 0x76, 0x6d, 0x73, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x64, 0x76, 0x6d, 0x73, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x61, 0x64, 0x76, 0x6d, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x77, 0x6e, 0x64,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x77, 0x6e, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x6e, 0x64, 0x5f, 0x77, 0x6e, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73,
	0x6e, 0x64, 0x57, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x6e, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x53, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x63,
	0x6b, 0x65, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x41, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x65, 0x67, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x73, 0x65, 0x67, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x67, 0x73, 0x5f,
	0x69, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x67, 0x73, 0x49, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x73, 0x6e, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x73, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61,
	0x73, 0x74, 0x72, 0x63, 0x76, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x61, 0x73,
	0x74, 0x72, 0x63, 0x76, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18,
	0x2c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x62, 0x75, 0x73, 0x79, 0x5f, 0x6d, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62,
	0x75, 0x73, 0x79, 0x4d, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x63, 0x76, 0x5f, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x63, 0x76, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x63, 0x76, 0x5f, 0x73, 0x73, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x63, 0x76, 0x53, 0x73, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65,
	0x67, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x65, 0x67, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x65, 0x67, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x67, 0x73, 0x49, 0x6e, 0x22, 0x8f, 0x01, 0x0a, 0x09,
	0x54, 0x63, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0b, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x22, 0xba, 0x02,
	0x0a, 0x0b, 0x49, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x78, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x72, 0x78, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x78, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x72, 0x78, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x72, 0x78, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x72, 0x78, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x78, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x78,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x64, 0x72, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x78, 0x44, 0x72,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x78, 0x5f, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x75, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x78, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x75, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x63, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x78, 0x43, 0x61,
	0x72, 0x72, 0x69, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x6c, 0x6c,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x78,
	0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x09, 0x4e,
	0x69, 0x63, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0b, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x49, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x52, 0x06, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x22, 0xf4, 0x0a, 0x0a, 0x0d, 0x4e, 0x65,
	0x74, 0x73, 0x74, 0x61, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x38, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x70, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x69, 0x70, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x70, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x69, 0x70, 0x49,
	0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x44, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x69, 0x70, 0x5f, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a,
	0x69, 0x70, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x70,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6f,
	0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x69,
	0x70, 0x5f, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x18, 0x69, 0x70, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x1f, 0x74, 0x63,
	0x70, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1c, 0x74, 0x63, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x45, 0x0a, 0x1f, 0x74, 0x63, 0x70, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x74, 0x63, 0x70, 0x50,
	0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x74, 0x63, 0x70, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1b, 0x74, 0x63, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x43, 0x0a,
	0x1e, 0x74, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x74, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x12, 0x3e, 0x0a, 0x1b, 0x74, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x74, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x74, 0x63, 0x70, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x63, 0x70, 0x5f, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x63, 0x70, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x3c, 0x0a, 0x1a, 0x74, 0x63, 0x70,
	0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x74,
	0x63, 0x70, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x74, 0x63, 0x70, 0x5f, 0x62,
	0x61, 0x64, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x74, 0x63, 0x70, 0x42,
	0x61, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x63, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73,
	0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x63, 0x70,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x64,
	0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x75, 0x64, 0x70, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x4d, 0x0a, 0x24,
	0x75, 0x64, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x75, 0x64, 0x70, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x54, 0x6f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x75,
	0x64, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16,
	0x75, 0x64, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x64, 0x70, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x75, 0x64, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x53, 0x65, 0x6e, 0x74,
	0x12, 0x39, 0x0a, 0x19, 0x75, 0x64, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x16, 0x75, 0x64, 0x70, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x75,
	0x64, 0x70, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x75, 0x64, 0x70,
	0x53, 0x65, 0x6e, 0x64, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x2a, 0x27, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07,
	0x0a, 0x03, 0x54, 0x43, 0x50, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x49, 0x43, 0x10, 0x01,
	0x12, 0x07, 0x0a, 0x03, 0x4e, 0x45, 0x54, 0x10, 0x02, 0x2a, 0xeb, 0x01, 0x0a, 0x0b, 0x53, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x43, 0x50,
	0x5f, 0x45, 0x53, 0x54, 0x41, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x54, 0x43, 0x50, 0x5f, 0x53, 0x59, 0x4e, 0x5f, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x54, 0x43, 0x50, 0x5f, 0x53, 0x59, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x56,
	0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x43, 0x50, 0x5f, 0x46, 0x49, 0x4e, 0x5f, 0x57, 0x41,
	0x49, 0x54, 0x31, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x43, 0x50, 0x5f, 0x46, 0x49, 0x4e,
	0x5f, 0x57, 0x41, 0x49, 0x54, 0x32, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x43, 0x50, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x54,
	0x43, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x43,
	0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x10, 0x07, 0x12, 0x10,
	0x0a, 0x0c, 0x54, 0x43, 0x50, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x08,
	0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x43, 0x50, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x10, 0x09,
	0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x43, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x49, 0x4e, 0x47, 0x10,
	0x0a, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x43, 0x50, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x53, 0x59, 0x4e,
	0x5f, 0x52, 0x45, 0x43, 0x56, 0x10, 0x0b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_tcpmon_proto_rawDescOnce sync.Once
	file_proto_tcpmon_proto_rawDescData = file_proto_tcpmon_proto_rawDesc
)

func file_proto_tcpmon_proto_rawDescGZIP() []byte {
	file_proto_tcpmon_proto_rawDescOnce.Do(func() {
		file_proto_tcpmon_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_tcpmon_proto_rawDescData)
	})
	return file_proto_tcpmon_proto_rawDescData
}

var file_proto_tcpmon_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_tcpmon_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_proto_tcpmon_proto_goTypes = []interface{}{
	(MetricType)(0),             // 0: MetricType
	(SocketState)(0),            // 1: SocketState
	(*SocketMemoryUsage)(nil),   // 2: SocketMemoryUsage
	(*TimerInfo)(nil),           // 3: TimerInfo
	(*SocketMetric)(nil),        // 4: SocketMetric
	(*TcpMetric)(nil),           // 5: TcpMetric
	(*IfaceMetric)(nil),         // 6: IfaceMetric
	(*NicMetric)(nil),           // 7: NicMetric
	(*NetstatMetric)(nil),       // 8: NetstatMetric
	(*timestamp.Timestamp)(nil), // 9: google.protobuf.Timestamp
}
var file_proto_tcpmon_proto_depIdxs = []int32{
	1,  // 0: SocketMetric.state:type_name -> SocketState
	3,  // 1: SocketMetric.timers:type_name -> TimerInfo
	2,  // 2: SocketMetric.skmem:type_name -> SocketMemoryUsage
	9,  // 3: TcpMetric.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 4: TcpMetric.type:type_name -> MetricType
	4,  // 5: TcpMetric.sockets:type_name -> SocketMetric
	9,  // 6: NicMetric.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 7: NicMetric.type:type_name -> MetricType
	6,  // 8: NicMetric.ifaces:type_name -> IfaceMetric
	9,  // 9: NetstatMetric.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 10: NetstatMetric.type:type_name -> MetricType
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_proto_tcpmon_proto_init() }
func file_proto_tcpmon_proto_init() {
	if File_proto_tcpmon_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_tcpmon_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SocketMemoryUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tcpmon_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tcpmon_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SocketMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tcpmon_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcpMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tcpmon_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IfaceMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tcpmon_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NicMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tcpmon_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetstatMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_tcpmon_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_tcpmon_proto_goTypes,
		DependencyIndexes: file_proto_tcpmon_proto_depIdxs,
		EnumInfos:         file_proto_tcpmon_proto_enumTypes,
		MessageInfos:      file_proto_tcpmon_proto_msgTypes,
	}.Build()
	File_proto_tcpmon_proto = out.File
	file_proto_tcpmon_proto_rawDesc = nil
	file_proto_tcpmon_proto_goTypes = nil
	file_proto_tcpmon_proto_depIdxs = nil
}
