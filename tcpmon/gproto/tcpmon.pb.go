// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.24.4
// source: proto/tcpmon.proto

package gproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MetricType int32

const (
	MetricType_TCP MetricType = 0
	MetricType_NIC MetricType = 1
	MetricType_NET MetricType = 2
)

// Enum value maps for MetricType.
var (
	MetricType_name = map[int32]string{
		0: "TCP",
		1: "NIC",
		2: "NET",
	}
	MetricType_value = map[string]int32{
		"TCP": 0,
		"NIC": 1,
		"NET": 2,
	}
)

func (x MetricType) Enum() *MetricType {
	p := new(MetricType)
	*p = x
	return p
}

func (x MetricType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_tcpmon_proto_enumTypes[0].Descriptor()
}

func (MetricType) Type() protoreflect.EnumType {
	return &file_proto_tcpmon_proto_enumTypes[0]
}

func (x MetricType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricType.Descriptor instead.
func (MetricType) EnumDescriptor() ([]byte, []int) {
	return file_proto_tcpmon_proto_rawDescGZIP(), []int{0}
}

// from linux/include/net/tcp_states.h
type SocketState int32

const (
	SocketState_TCP_ESTABLISHED  SocketState = 0
	SocketState_TCP_SYN_SENT     SocketState = 1
	SocketState_TCP_SYN_RECV     SocketState = 2
	SocketState_TCP_FIN_WAIT1    SocketState = 3
	SocketState_TCP_FIN_WAIT2    SocketState = 4
	SocketState_TCP_TIME_WAIT    SocketState = 5
	SocketState_TCP_CLOSE        SocketState = 6
	SocketState_TCP_CLOSE_WAIT   SocketState = 7
	SocketState_TCP_LAST_ACK     SocketState = 8
	SocketState_TCP_LISTEN       SocketState = 9
	SocketState_TCP_CLOSING      SocketState = 10
	SocketState_TCP_NEW_SYN_RECV SocketState = 11
)

// Enum value maps for SocketState.
var (
	SocketState_name = map[int32]string{
		0:  "TCP_ESTABLISHED",
		1:  "TCP_SYN_SENT",
		2:  "TCP_SYN_RECV",
		3:  "TCP_FIN_WAIT1",
		4:  "TCP_FIN_WAIT2",
		5:  "TCP_TIME_WAIT",
		6:  "TCP_CLOSE",
		7:  "TCP_CLOSE_WAIT",
		8:  "TCP_LAST_ACK",
		9:  "TCP_LISTEN",
		10: "TCP_CLOSING",
		11: "TCP_NEW_SYN_RECV",
	}
	SocketState_value = map[string]int32{
		"TCP_ESTABLISHED":  0,
		"TCP_SYN_SENT":     1,
		"TCP_SYN_RECV":     2,
		"TCP_FIN_WAIT1":    3,
		"TCP_FIN_WAIT2":    4,
		"TCP_TIME_WAIT":    5,
		"TCP_CLOSE":        6,
		"TCP_CLOSE_WAIT":   7,
		"TCP_LAST_ACK":     8,
		"TCP_LISTEN":       9,
		"TCP_CLOSING":      10,
		"TCP_NEW_SYN_RECV": 11,
	}
)

func (x SocketState) Enum() *SocketState {
	p := new(SocketState)
	*p = x
	return p
}

func (x SocketState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SocketState) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_tcpmon_proto_enumTypes[1].Descriptor()
}

func (SocketState) Type() protoreflect.EnumType {
	return &file_proto_tcpmon_proto_enumTypes[1]
}

func (x SocketState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SocketState.Descriptor instead.
func (SocketState) EnumDescriptor() ([]byte, []int) {
	return file_proto_tcpmon_proto_rawDescGZIP(), []int{1}
}

type Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Body:
	//
	//	*Metric_Tcp
	//	*Metric_Nic
	//	*Metric_Net
	Body isMetric_Body `protobuf_oneof:"body"`
}

func (x *Metric) Reset() {
	*x = Metric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tcpmon_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metric) ProtoMessage() {}

func (x *Metric) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tcpmon_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metric.ProtoReflect.Descriptor instead.
func (*Metric) Descriptor() ([]byte, []int) {
	return file_proto_tcpmon_proto_rawDescGZIP(), []int{0}
}

func (m *Metric) GetBody() isMetric_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *Metric) GetTcp() *TcpMetric {
	if x, ok := x.GetBody().(*Metric_Tcp); ok {
		return x.Tcp
	}
	return nil
}

func (x *Metric) GetNic() *NicMetric {
	if x, ok := x.GetBody().(*Metric_Nic); ok {
		return x.Nic
	}
	return nil
}

func (x *Metric) GetNet() *NetstatMetric {
	if x, ok := x.GetBody().(*Metric_Net); ok {
		return x.Net
	}
	return nil
}

type isMetric_Body interface {
	isMetric_Body()
}

type Metric_Tcp struct {
	Tcp *TcpMetric `protobuf:"bytes,1,opt,name=tcp,proto3,oneof"`
}

type Metric_Nic struct {
	Nic *NicMetric `protobuf:"bytes,2,opt,name=nic,proto3,oneof"`
}

type Metric_Net struct {
	Net *NetstatMetric `protobuf:"bytes,3,opt,name=net,proto3,oneof"`
}

func (*Metric_Tcp) isMetric_Body() {}

func (*Metric_Nic) isMetric_Body() {}

func (*Metric_Net) isMetric_Body() {}

// Socket memory usage. aka skmem
// check: https://man7.org/linux/man-pages/man8/ss.8.html
type SocketMemoryUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RmemAlloc  uint32 `protobuf:"varint,1,opt,name=rmem_alloc,json=rmemAlloc,proto3" json:"rmem_alloc,omitempty"`    // the memory allocated for receiving packet
	RcvBuf     uint32 `protobuf:"varint,2,opt,name=rcv_buf,json=rcvBuf,proto3" json:"rcv_buf,omitempty"`             // the total memory can be allocated for receiving packet
	WmemAlloc  uint32 `protobuf:"varint,3,opt,name=wmem_alloc,json=wmemAlloc,proto3" json:"wmem_alloc,omitempty"`    // the memory used for sending packet (which has been sent to layer 3)
	SndBuf     uint32 `protobuf:"varint,4,opt,name=snd_buf,json=sndBuf,proto3" json:"snd_buf,omitempty"`             // the total memory can be allocated for sending packet
	FwdAlloc   uint32 `protobuf:"varint,5,opt,name=fwd_alloc,json=fwdAlloc,proto3" json:"fwd_alloc,omitempty"`       // the memory allocated by the socket as cache, but not used for receiving/sending packet yet.
	WmemQueued uint32 `protobuf:"varint,6,opt,name=wmem_queued,json=wmemQueued,proto3" json:"wmem_queued,omitempty"` // The memory allocated for sending packet (which has not been sent to layer 3)
	OptMem     uint32 `protobuf:"varint,7,opt,name=opt_mem,json=optMem,proto3" json:"opt_mem,omitempty"`             // The memory used for storing socket option, e.g., the key for TCP MD5 signature
	BackLog    uint32 `protobuf:"varint,8,opt,name=back_log,json=backLog,proto3" json:"back_log,omitempty"`          // The memory used for the sk backlog queue
	SockDrop   uint32 `protobuf:"varint,9,opt,name=sock_drop,json=sockDrop,proto3" json:"sock_drop,omitempty"`       // the number of packets dropped before they are de-multiplexed into the socket
}

func (x *SocketMemoryUsage) Reset() {
	*x = SocketMemoryUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tcpmon_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocketMemoryUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocketMemoryUsage) ProtoMessage() {}

func (x *SocketMemoryUsage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tcpmon_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocketMemoryUsage.ProtoReflect.Descriptor instead.
func (*SocketMemoryUsage) Descriptor() ([]byte, []int) {
	return file_proto_tcpmon_proto_rawDescGZIP(), []int{1}
}

func (x *SocketMemoryUsage) GetRmemAlloc() uint32 {
	if x != nil {
		return x.RmemAlloc
	}
	return 0
}

func (x *SocketMemoryUsage) GetRcvBuf() uint32 {
	if x != nil {
		return x.RcvBuf
	}
	return 0
}

func (x *SocketMemoryUsage) GetWmemAlloc() uint32 {
	if x != nil {
		return x.WmemAlloc
	}
	return 0
}

func (x *SocketMemoryUsage) GetSndBuf() uint32 {
	if x != nil {
		return x.SndBuf
	}
	return 0
}

func (x *SocketMemoryUsage) GetFwdAlloc() uint32 {
	if x != nil {
		return x.FwdAlloc
	}
	return 0
}

func (x *SocketMemoryUsage) GetWmemQueued() uint32 {
	if x != nil {
		return x.WmemQueued
	}
	return 0
}

func (x *SocketMemoryUsage) GetOptMem() uint32 {
	if x != nil {
		return x.OptMem
	}
	return 0
}

func (x *SocketMemoryUsage) GetBackLog() uint32 {
	if x != nil {
		return x.BackLog
	}
	return 0
}

func (x *SocketMemoryUsage) GetSockDrop() uint32 {
	if x != nil {
		return x.SockDrop
	}
	return 0
}

type TimerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // the name of timer
	ExpireTimeUs uint64 `protobuf:"varint,2,opt,name=expire_time_us,json=expireTimeUs,proto3" json:"expire_time_us,omitempty"`
	Retrans      uint32 `protobuf:"varint,3,opt,name=retrans,proto3" json:"retrans,omitempty"`
}

func (x *TimerInfo) Reset() {
	*x = TimerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tcpmon_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimerInfo) ProtoMessage() {}

func (x *TimerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tcpmon_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimerInfo.ProtoReflect.Descriptor instead.
func (*TimerInfo) Descriptor() ([]byte, []int) {
	return file_proto_tcpmon_proto_rawDescGZIP(), []int{2}
}

func (x *TimerInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TimerInfo) GetExpireTimeUs() uint64 {
	if x != nil {
		return x.ExpireTimeUs
	}
	return 0
}

func (x *TimerInfo) GetRetrans() uint32 {
	if x != nil {
		return x.Retrans
	}
	return 0
}

type ProcessInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Pid  uint32 `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
	Fd   uint32 `protobuf:"varint,3,opt,name=fd,proto3" json:"fd,omitempty"`
}

func (x *ProcessInfo) Reset() {
	*x = ProcessInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tcpmon_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessInfo) ProtoMessage() {}

func (x *ProcessInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tcpmon_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessInfo.ProtoReflect.Descriptor instead.
func (*ProcessInfo) Descriptor() ([]byte, []int) {
	return file_proto_tcpmon_proto_rawDescGZIP(), []int{3}
}

func (x *ProcessInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProcessInfo) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *ProcessInfo) GetFd() uint32 {
	if x != nil {
		return x.Fd
	}
	return 0
}

type SocketMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State         SocketState        `protobuf:"varint,3,opt,name=state,proto3,enum=SocketState" json:"state,omitempty"`
	RecvQ         uint32             `protobuf:"varint,4,opt,name=recv_q,json=recvQ,proto3" json:"recv_q,omitempty"`
	SendQ         int64              `protobuf:"varint,5,opt,name=send_q,json=sendQ,proto3" json:"send_q,omitempty"`
	LocalAddr     string             `protobuf:"bytes,6,opt,name=local_addr,json=localAddr,proto3" json:"local_addr,omitempty"`
	PeerAddr      string             `protobuf:"bytes,7,opt,name=peer_addr,json=peerAddr,proto3" json:"peer_addr,omitempty"`
	Processes     []*ProcessInfo     `protobuf:"bytes,8,rep,name=processes,proto3" json:"processes,omitempty"`
	Timers        []*TimerInfo       `protobuf:"bytes,9,rep,name=timers,proto3" json:"timers,omitempty"`
	Skmem         *SocketMemoryUsage `protobuf:"bytes,10,opt,name=skmem,proto3" json:"skmem,omitempty"`
	Ts            bool               `protobuf:"varint,11,opt,name=ts,proto3" json:"ts,omitempty"`
	Sack          bool               `protobuf:"varint,12,opt,name=sack,proto3" json:"sack,omitempty"`
	Cubic         bool               `protobuf:"varint,13,opt,name=cubic,proto3" json:"cubic,omitempty"`
	AppLimited    bool               `protobuf:"varint,14,opt,name=app_limited,json=appLimited,proto3" json:"app_limited,omitempty"`
	PacingRate    float64            `protobuf:"fixed64,15,opt,name=pacing_rate,json=pacingRate,proto3" json:"pacing_rate,omitempty"`
	DeliveryRate  float64            `protobuf:"fixed64,16,opt,name=delivery_rate,json=deliveryRate,proto3" json:"delivery_rate,omitempty"`
	Send          float64            `protobuf:"fixed64,17,opt,name=send,proto3" json:"send,omitempty"`
	SndWscale     uint32             `protobuf:"varint,18,opt,name=snd_wscale,json=sndWscale,proto3" json:"snd_wscale,omitempty"` // window scaling
	RcvWscale     uint32             `protobuf:"varint,19,opt,name=rcv_wscale,json=rcvWscale,proto3" json:"rcv_wscale,omitempty"`
	Rto           float64            `protobuf:"fixed64,20,opt,name=rto,proto3" json:"rto,omitempty"`
	Rtt           float64            `protobuf:"fixed64,21,opt,name=rtt,proto3" json:"rtt,omitempty"`
	Rttvar        float64            `protobuf:"fixed64,22,opt,name=rttvar,proto3" json:"rttvar,omitempty"`
	Minrtt        float64            `protobuf:"fixed64,23,opt,name=minrtt,proto3" json:"minrtt,omitempty"`
	RcvRtt        float64            `protobuf:"fixed64,24,opt,name=rcv_rtt,json=rcvRtt,proto3" json:"rcv_rtt,omitempty"`
	RetransNow    uint32             `protobuf:"varint,25,opt,name=retrans_now,json=retransNow,proto3" json:"retrans_now,omitempty"`
	RetransTotal  uint32             `protobuf:"varint,26,opt,name=retrans_total,json=retransTotal,proto3" json:"retrans_total,omitempty"`
	Ato           float64            `protobuf:"fixed64,30,opt,name=ato,proto3" json:"ato,omitempty"`
	Mss           uint32             `protobuf:"varint,31,opt,name=mss,proto3" json:"mss,omitempty"`
	Pmtu          uint32             `protobuf:"varint,32,opt,name=pmtu,proto3" json:"pmtu,omitempty"`
	Rcvmss        uint32             `protobuf:"varint,33,opt,name=rcvmss,proto3" json:"rcvmss,omitempty"`
	Advmss        uint32             `protobuf:"varint,34,opt,name=advmss,proto3" json:"advmss,omitempty"`
	Cwnd          uint32             `protobuf:"varint,35,opt,name=cwnd,proto3" json:"cwnd,omitempty"`
	SndWnd        uint32             `protobuf:"varint,36,opt,name=snd_wnd,json=sndWnd,proto3" json:"snd_wnd,omitempty"`
	BytesSent     uint32             `protobuf:"varint,37,opt,name=bytes_sent,json=bytesSent,proto3" json:"bytes_sent,omitempty"`
	BytesAcked    uint64             `protobuf:"varint,38,opt,name=bytes_acked,json=bytesAcked,proto3" json:"bytes_acked,omitempty"`
	BytesReceived uint64             `protobuf:"varint,39,opt,name=bytes_received,json=bytesReceived,proto3" json:"bytes_received,omitempty"`
	SegsOut       uint32             `protobuf:"varint,40,opt,name=segs_out,json=segsOut,proto3" json:"segs_out,omitempty"`
	SegsIn        uint32             `protobuf:"varint,41,opt,name=segs_in,json=segsIn,proto3" json:"segs_in,omitempty"`
	Lastsnd       uint32             `protobuf:"varint,42,opt,name=lastsnd,proto3" json:"lastsnd,omitempty"`
	Lastrcv       uint32             `protobuf:"varint,43,opt,name=lastrcv,proto3" json:"lastrcv,omitempty"`
	Lastack       uint32             `protobuf:"varint,44,opt,name=lastack,proto3" json:"lastack,omitempty"`
	Delivered     uint32             `protobuf:"varint,45,opt,name=delivered,proto3" json:"delivered,omitempty"`
	BusyMs        uint32             `protobuf:"varint,46,opt,name=busy_ms,json=busyMs,proto3" json:"busy_ms,omitempty"`
	RcvSpace      uint32             `protobuf:"varint,47,opt,name=rcv_space,json=rcvSpace,proto3" json:"rcv_space,omitempty"`
	RcvSsthresh   uint32             `protobuf:"varint,48,opt,name=rcv_ssthresh,json=rcvSsthresh,proto3" json:"rcv_ssthresh,omitempty"`
	DataSegsOut   uint32             `protobuf:"varint,49,opt,name=data_segs_out,json=dataSegsOut,proto3" json:"data_segs_out,omitempty"`
	DataSegsIn    uint32             `protobuf:"varint,50,opt,name=data_segs_in,json=dataSegsIn,proto3" json:"data_segs_in,omitempty"`
	RwndLimited   uint32             `protobuf:"varint,51,opt,name=rwnd_limited,json=rwndLimited,proto3" json:"rwnd_limited,omitempty"`
	SndbufLimited uint32             `protobuf:"varint,52,opt,name=sndbuf_limited,json=sndbufLimited,proto3" json:"sndbuf_limited,omitempty"`
	Ecn           bool               `protobuf:"varint,53,opt,name=ecn,proto3" json:"ecn,omitempty"`
	Ecnseen       bool               `protobuf:"varint,54,opt,name=ecnseen,proto3" json:"ecnseen,omitempty"`
}

func (x *SocketMetric) Reset() {
	*x = SocketMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tcpmon_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocketMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocketMetric) ProtoMessage() {}

func (x *SocketMetric) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tcpmon_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocketMetric.ProtoReflect.Descriptor instead.
func (*SocketMetric) Descriptor() ([]byte, []int) {
	return file_proto_tcpmon_proto_rawDescGZIP(), []int{4}
}

func (x *SocketMetric) GetState() SocketState {
	if x != nil {
		return x.State
	}
	return SocketState_TCP_ESTABLISHED
}

func (x *SocketMetric) GetRecvQ() uint32 {
	if x != nil {
		return x.RecvQ
	}
	return 0
}

func (x *SocketMetric) GetSendQ() int64 {
	if x != nil {
		return x.SendQ
	}
	return 0
}

func (x *SocketMetric) GetLocalAddr() string {
	if x != nil {
		return x.LocalAddr
	}
	return ""
}

func (x *SocketMetric) GetPeerAddr() string {
	if x != nil {
		return x.PeerAddr
	}
	return ""
}

func (x *SocketMetric) GetProcesses() []*ProcessInfo {
	if x != nil {
		return x.Processes
	}
	return nil
}

func (x *SocketMetric) GetTimers() []*TimerInfo {
	if x != nil {
		return x.Timers
	}
	return nil
}

func (x *SocketMetric) GetSkmem() *SocketMemoryUsage {
	if x != nil {
		return x.Skmem
	}
	return nil
}

func (x *SocketMetric) GetTs() bool {
	if x != nil {
		return x.Ts
	}
	return false
}

func (x *SocketMetric) GetSack() bool {
	if x != nil {
		return x.Sack
	}
	return false
}

func (x *SocketMetric) GetCubic() bool {
	if x != nil {
		return x.Cubic
	}
	return false
}

func (x *SocketMetric) GetAppLimited() bool {
	if x != nil {
		return x.AppLimited
	}
	return false
}

func (x *SocketMetric) GetPacingRate() float64 {
	if x != nil {
		return x.PacingRate
	}
	return 0
}

func (x *SocketMetric) GetDeliveryRate() float64 {
	if x != nil {
		return x.DeliveryRate
	}
	return 0
}

func (x *SocketMetric) GetSend() float64 {
	if x != nil {
		return x.Send
	}
	return 0
}

func (x *SocketMetric) GetSndWscale() uint32 {
	if x != nil {
		return x.SndWscale
	}
	return 0
}

func (x *SocketMetric) GetRcvWscale() uint32 {
	if x != nil {
		return x.RcvWscale
	}
	return 0
}

func (x *SocketMetric) GetRto() float64 {
	if x != nil {
		return x.Rto
	}
	return 0
}

func (x *SocketMetric) GetRtt() float64 {
	if x != nil {
		return x.Rtt
	}
	return 0
}

func (x *SocketMetric) GetRttvar() float64 {
	if x != nil {
		return x.Rttvar
	}
	return 0
}

func (x *SocketMetric) GetMinrtt() float64 {
	if x != nil {
		return x.Minrtt
	}
	return 0
}

func (x *SocketMetric) GetRcvRtt() float64 {
	if x != nil {
		return x.RcvRtt
	}
	return 0
}

func (x *SocketMetric) GetRetransNow() uint32 {
	if x != nil {
		return x.RetransNow
	}
	return 0
}

func (x *SocketMetric) GetRetransTotal() uint32 {
	if x != nil {
		return x.RetransTotal
	}
	return 0
}

func (x *SocketMetric) GetAto() float64 {
	if x != nil {
		return x.Ato
	}
	return 0
}

func (x *SocketMetric) GetMss() uint32 {
	if x != nil {
		return x.Mss
	}
	return 0
}

func (x *SocketMetric) GetPmtu() uint32 {
	if x != nil {
		return x.Pmtu
	}
	return 0
}

func (x *SocketMetric) GetRcvmss() uint32 {
	if x != nil {
		return x.Rcvmss
	}
	return 0
}

func (x *SocketMetric) GetAdvmss() uint32 {
	if x != nil {
		return x.Advmss
	}
	return 0
}

func (x *SocketMetric) GetCwnd() uint32 {
	if x != nil {
		return x.Cwnd
	}
	return 0
}

func (x *SocketMetric) GetSndWnd() uint32 {
	if x != nil {
		return x.SndWnd
	}
	return 0
}

func (x *SocketMetric) GetBytesSent() uint32 {
	if x != nil {
		return x.BytesSent
	}
	return 0
}

func (x *SocketMetric) GetBytesAcked() uint64 {
	if x != nil {
		return x.BytesAcked
	}
	return 0
}

func (x *SocketMetric) GetBytesReceived() uint64 {
	if x != nil {
		return x.BytesReceived
	}
	return 0
}

func (x *SocketMetric) GetSegsOut() uint32 {
	if x != nil {
		return x.SegsOut
	}
	return 0
}

func (x *SocketMetric) GetSegsIn() uint32 {
	if x != nil {
		return x.SegsIn
	}
	return 0
}

func (x *SocketMetric) GetLastsnd() uint32 {
	if x != nil {
		return x.Lastsnd
	}
	return 0
}

func (x *SocketMetric) GetLastrcv() uint32 {
	if x != nil {
		return x.Lastrcv
	}
	return 0
}

func (x *SocketMetric) GetLastack() uint32 {
	if x != nil {
		return x.Lastack
	}
	return 0
}

func (x *SocketMetric) GetDelivered() uint32 {
	if x != nil {
		return x.Delivered
	}
	return 0
}

func (x *SocketMetric) GetBusyMs() uint32 {
	if x != nil {
		return x.BusyMs
	}
	return 0
}

func (x *SocketMetric) GetRcvSpace() uint32 {
	if x != nil {
		return x.RcvSpace
	}
	return 0
}

func (x *SocketMetric) GetRcvSsthresh() uint32 {
	if x != nil {
		return x.RcvSsthresh
	}
	return 0
}

func (x *SocketMetric) GetDataSegsOut() uint32 {
	if x != nil {
		return x.DataSegsOut
	}
	return 0
}

func (x *SocketMetric) GetDataSegsIn() uint32 {
	if x != nil {
		return x.DataSegsIn
	}
	return 0
}

func (x *SocketMetric) GetRwndLimited() uint32 {
	if x != nil {
		return x.RwndLimited
	}
	return 0
}

func (x *SocketMetric) GetSndbufLimited() uint32 {
	if x != nil {
		return x.SndbufLimited
	}
	return 0
}

func (x *SocketMetric) GetEcn() bool {
	if x != nil {
		return x.Ecn
	}
	return false
}

func (x *SocketMetric) GetEcnseen() bool {
	if x != nil {
		return x.Ecnseen
	}
	return false
}

type TcpMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// header
	Timestamp int64      `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Type      MetricType `protobuf:"varint,2,opt,name=type,proto3,enum=MetricType" json:"type,omitempty"`
	// fields
	Sockets []*SocketMetric `protobuf:"bytes,3,rep,name=sockets,proto3" json:"sockets,omitempty"`
}

func (x *TcpMetric) Reset() {
	*x = TcpMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tcpmon_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcpMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpMetric) ProtoMessage() {}

func (x *TcpMetric) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tcpmon_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpMetric.ProtoReflect.Descriptor instead.
func (*TcpMetric) Descriptor() ([]byte, []int) {
	return file_proto_tcpmon_proto_rawDescGZIP(), []int{5}
}

func (x *TcpMetric) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *TcpMetric) GetType() MetricType {
	if x != nil {
		return x.Type
	}
	return MetricType_TCP
}

func (x *TcpMetric) GetSockets() []*SocketMetric {
	if x != nil {
		return x.Sockets
	}
	return nil
}

type IfaceMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RxErrors     uint64 `protobuf:"varint,2,opt,name=rx_errors,json=rxErrors,proto3" json:"rx_errors,omitempty"`
	RxDropped    uint64 `protobuf:"varint,3,opt,name=rx_dropped,json=rxDropped,proto3" json:"rx_dropped,omitempty"`
	RxOverruns   uint64 `protobuf:"varint,4,opt,name=rx_overruns,json=rxOverruns,proto3" json:"rx_overruns,omitempty"`
	RxFrame      uint64 `protobuf:"varint,5,opt,name=rx_frame,json=rxFrame,proto3" json:"rx_frame,omitempty"`
	TxErrors     uint64 `protobuf:"varint,6,opt,name=tx_errors,json=txErrors,proto3" json:"tx_errors,omitempty"`
	TxDropped    uint64 `protobuf:"varint,7,opt,name=tx_dropped,json=txDropped,proto3" json:"tx_dropped,omitempty"`
	TxOverruns   uint64 `protobuf:"varint,8,opt,name=tx_overruns,json=txOverruns,proto3" json:"tx_overruns,omitempty"`
	TxCarrier    uint64 `protobuf:"varint,9,opt,name=tx_carrier,json=txCarrier,proto3" json:"tx_carrier,omitempty"`
	TxCollisions uint64 `protobuf:"varint,10,opt,name=tx_collisions,json=txCollisions,proto3" json:"tx_collisions,omitempty"`
}

func (x *IfaceMetric) Reset() {
	*x = IfaceMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tcpmon_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IfaceMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IfaceMetric) ProtoMessage() {}

func (x *IfaceMetric) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tcpmon_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IfaceMetric.ProtoReflect.Descriptor instead.
func (*IfaceMetric) Descriptor() ([]byte, []int) {
	return file_proto_tcpmon_proto_rawDescGZIP(), []int{6}
}

func (x *IfaceMetric) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IfaceMetric) GetRxErrors() uint64 {
	if x != nil {
		return x.RxErrors
	}
	return 0
}

func (x *IfaceMetric) GetRxDropped() uint64 {
	if x != nil {
		return x.RxDropped
	}
	return 0
}

func (x *IfaceMetric) GetRxOverruns() uint64 {
	if x != nil {
		return x.RxOverruns
	}
	return 0
}

func (x *IfaceMetric) GetRxFrame() uint64 {
	if x != nil {
		return x.RxFrame
	}
	return 0
}

func (x *IfaceMetric) GetTxErrors() uint64 {
	if x != nil {
		return x.TxErrors
	}
	return 0
}

func (x *IfaceMetric) GetTxDropped() uint64 {
	if x != nil {
		return x.TxDropped
	}
	return 0
}

func (x *IfaceMetric) GetTxOverruns() uint64 {
	if x != nil {
		return x.TxOverruns
	}
	return 0
}

func (x *IfaceMetric) GetTxCarrier() uint64 {
	if x != nil {
		return x.TxCarrier
	}
	return 0
}

func (x *IfaceMetric) GetTxCollisions() uint64 {
	if x != nil {
		return x.TxCollisions
	}
	return 0
}

type NicMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// header
	Timestamp int64      `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Type      MetricType `protobuf:"varint,2,opt,name=type,proto3,enum=MetricType" json:"type,omitempty"`
	// fields
	Ifaces []*IfaceMetric `protobuf:"bytes,3,rep,name=ifaces,proto3" json:"ifaces,omitempty"`
}

func (x *NicMetric) Reset() {
	*x = NicMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tcpmon_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NicMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NicMetric) ProtoMessage() {}

func (x *NicMetric) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tcpmon_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NicMetric.ProtoReflect.Descriptor instead.
func (*NicMetric) Descriptor() ([]byte, []int) {
	return file_proto_tcpmon_proto_rawDescGZIP(), []int{7}
}

func (x *NicMetric) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *NicMetric) GetType() MetricType {
	if x != nil {
		return x.Type
	}
	return MetricType_TCP
}

func (x *NicMetric) GetIfaces() []*IfaceMetric {
	if x != nil {
		return x.Ifaces
	}
	return nil
}

type NetstatMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// header
	Timestamp int64      `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Type      MetricType `protobuf:"varint,2,opt,name=type,proto3,enum=MetricType" json:"type,omitempty"`
	// ip /proc/net/snmp
	IpForwarding      uint64 `protobuf:"varint,100,opt,name=ip_forwarding,json=ipForwarding,proto3" json:"ip_forwarding,omitempty"`
	IpDefaultTtl      uint64 `protobuf:"varint,101,opt,name=ip_default_ttl,json=ipDefaultTtl,proto3" json:"ip_default_ttl,omitempty"`
	IpInReceives      uint64 `protobuf:"varint,102,opt,name=ip_in_receives,json=ipInReceives,proto3" json:"ip_in_receives,omitempty"`
	IpInHdrErrors     uint64 `protobuf:"varint,103,opt,name=ip_in_hdr_errors,json=ipInHdrErrors,proto3" json:"ip_in_hdr_errors,omitempty"`
	IpInAddrErrors    uint64 `protobuf:"varint,104,opt,name=ip_in_addr_errors,json=ipInAddrErrors,proto3" json:"ip_in_addr_errors,omitempty"`
	IpForwDatagrams   uint64 `protobuf:"varint,105,opt,name=ip_forw_datagrams,json=ipForwDatagrams,proto3" json:"ip_forw_datagrams,omitempty"`
	IpInUnknownProtos uint64 `protobuf:"varint,106,opt,name=ip_in_unknown_protos,json=ipInUnknownProtos,proto3" json:"ip_in_unknown_protos,omitempty"`
	IpInDiscards      uint64 `protobuf:"varint,107,opt,name=ip_in_discards,json=ipInDiscards,proto3" json:"ip_in_discards,omitempty"`
	IpInDelivers      uint64 `protobuf:"varint,108,opt,name=ip_in_delivers,json=ipInDelivers,proto3" json:"ip_in_delivers,omitempty"`
	IpOutRequests     uint64 `protobuf:"varint,109,opt,name=ip_out_requests,json=ipOutRequests,proto3" json:"ip_out_requests,omitempty"`
	IpOutDiscards     uint64 `protobuf:"varint,110,opt,name=ip_out_discards,json=ipOutDiscards,proto3" json:"ip_out_discards,omitempty"`
	IpOutNoRoutes     uint64 `protobuf:"varint,111,opt,name=ip_out_no_routes,json=ipOutNoRoutes,proto3" json:"ip_out_no_routes,omitempty"`
	IpReasmTimeout    uint64 `protobuf:"varint,112,opt,name=ip_reasm_timeout,json=ipReasmTimeout,proto3" json:"ip_reasm_timeout,omitempty"`
	IpReasmReqds      uint64 `protobuf:"varint,113,opt,name=ip_reasm_reqds,json=ipReasmReqds,proto3" json:"ip_reasm_reqds,omitempty"`
	IpReasmOks        uint64 `protobuf:"varint,114,opt,name=ip_reasm_oks,json=ipReasmOks,proto3" json:"ip_reasm_oks,omitempty"`
	IpReasmFails      uint64 `protobuf:"varint,115,opt,name=ip_reasm_fails,json=ipReasmFails,proto3" json:"ip_reasm_fails,omitempty"`
	IpFragOks         uint64 `protobuf:"varint,116,opt,name=ip_frag_oks,json=ipFragOks,proto3" json:"ip_frag_oks,omitempty"`
	IpFragFails       uint64 `protobuf:"varint,117,opt,name=ip_frag_fails,json=ipFragFails,proto3" json:"ip_frag_fails,omitempty"`
	IpFragCreates     uint64 `protobuf:"varint,118,opt,name=ip_frag_creates,json=ipFragCreates,proto3" json:"ip_frag_creates,omitempty"`
	// ip ext /proc/net/netstat
	IpInNoRoutes      uint64 `protobuf:"varint,600,opt,name=ip_in_no_routes,json=ipInNoRoutes,proto3" json:"ip_in_no_routes,omitempty"`
	IpInTruncatedPkts uint64 `protobuf:"varint,601,opt,name=ip_in_truncated_pkts,json=ipInTruncatedPkts,proto3" json:"ip_in_truncated_pkts,omitempty"`
	IpInMcastPkts     uint64 `protobuf:"varint,602,opt,name=ip_in_mcast_pkts,json=ipInMcastPkts,proto3" json:"ip_in_mcast_pkts,omitempty"`
	IpOutMcastPkts    uint64 `protobuf:"varint,603,opt,name=ip_out_mcast_pkts,json=ipOutMcastPkts,proto3" json:"ip_out_mcast_pkts,omitempty"`
	IpInBcastPkts     uint64 `protobuf:"varint,604,opt,name=ip_in_bcast_pkts,json=ipInBcastPkts,proto3" json:"ip_in_bcast_pkts,omitempty"`
	IpOutBcastPkts    uint64 `protobuf:"varint,605,opt,name=ip_out_bcast_pkts,json=ipOutBcastPkts,proto3" json:"ip_out_bcast_pkts,omitempty"`
	IpInOctets        uint64 `protobuf:"varint,606,opt,name=ip_in_octets,json=ipInOctets,proto3" json:"ip_in_octets,omitempty"`
	IpOutOctets       uint64 `protobuf:"varint,607,opt,name=ip_out_octets,json=ipOutOctets,proto3" json:"ip_out_octets,omitempty"`
	IpInMcastOctets   uint64 `protobuf:"varint,608,opt,name=ip_in_mcast_octets,json=ipInMcastOctets,proto3" json:"ip_in_mcast_octets,omitempty"`
	IpOutMcastOctets  uint64 `protobuf:"varint,609,opt,name=ip_out_mcast_octets,json=ipOutMcastOctets,proto3" json:"ip_out_mcast_octets,omitempty"`
	IpInBcastOctets   uint64 `protobuf:"varint,610,opt,name=ip_in_bcast_octets,json=ipInBcastOctets,proto3" json:"ip_in_bcast_octets,omitempty"`
	IpOutBcastOctets  uint64 `protobuf:"varint,611,opt,name=ip_out_bcast_octets,json=ipOutBcastOctets,proto3" json:"ip_out_bcast_octets,omitempty"`
	IpInCsumErrors    uint64 `protobuf:"varint,612,opt,name=ip_in_csum_errors,json=ipInCsumErrors,proto3" json:"ip_in_csum_errors,omitempty"`
	IpInNoEctPkts     uint64 `protobuf:"varint,613,opt,name=ip_in_no_ect_pkts,json=ipInNoEctPkts,proto3" json:"ip_in_no_ect_pkts,omitempty"`
	IpInEct1Pkts      uint64 `protobuf:"varint,614,opt,name=ip_in_ect1_pkts,json=ipInEct1Pkts,proto3" json:"ip_in_ect1_pkts,omitempty"`
	IpInEct0Pkts      uint64 `protobuf:"varint,615,opt,name=ip_in_ect0_pkts,json=ipInEct0Pkts,proto3" json:"ip_in_ect0_pkts,omitempty"`
	IpInCePkts        uint64 `protobuf:"varint,616,opt,name=ip_in_ce_pkts,json=ipInCePkts,proto3" json:"ip_in_ce_pkts,omitempty"`
	IpReasmOverlaps   uint64 `protobuf:"varint,617,opt,name=ip_reasm_overlaps,json=ipReasmOverlaps,proto3" json:"ip_reasm_overlaps,omitempty"`
	// udp /proc/net/snmp
	UdpInDatagrams  uint64 `protobuf:"varint,200,opt,name=udp_in_datagrams,json=udpInDatagrams,proto3" json:"udp_in_datagrams,omitempty"`
	UdpNoPorts      uint64 `protobuf:"varint,201,opt,name=udp_no_ports,json=udpNoPorts,proto3" json:"udp_no_ports,omitempty"`
	UdpInErrors     uint64 `protobuf:"varint,202,opt,name=udp_in_errors,json=udpInErrors,proto3" json:"udp_in_errors,omitempty"`
	UdpOutDatagrams uint64 `protobuf:"varint,203,opt,name=udp_out_datagrams,json=udpOutDatagrams,proto3" json:"udp_out_datagrams,omitempty"`
	UdpRcvbufErrors uint64 `protobuf:"varint,204,opt,name=udp_rcvbuf_errors,json=udpRcvbufErrors,proto3" json:"udp_rcvbuf_errors,omitempty"`
	UdpSndbufErrors uint64 `protobuf:"varint,205,opt,name=udp_sndbuf_errors,json=udpSndbufErrors,proto3" json:"udp_sndbuf_errors,omitempty"`
	UdpInCsumErrors uint64 `protobuf:"varint,206,opt,name=udp_in_csum_errors,json=udpInCsumErrors,proto3" json:"udp_in_csum_errors,omitempty"`
	UdpIgnoredMulti uint64 `protobuf:"varint,207,opt,name=udp_ignored_multi,json=udpIgnoredMulti,proto3" json:"udp_ignored_multi,omitempty"`
	UdpMemErrors    uint64 `protobuf:"varint,208,opt,name=udp_mem_errors,json=udpMemErrors,proto3" json:"udp_mem_errors,omitempty"`
	// tcp /proc/net/snmp
	TcpRtoAlgorithm uint64 `protobuf:"varint,300,opt,name=tcp_rto_algorithm,json=tcpRtoAlgorithm,proto3" json:"tcp_rto_algorithm,omitempty"`
	TcpRtoMin       uint64 `protobuf:"varint,301,opt,name=tcp_rto_min,json=tcpRtoMin,proto3" json:"tcp_rto_min,omitempty"`
	TcpRtoMax       uint64 `protobuf:"varint,302,opt,name=tcp_rto_max,json=tcpRtoMax,proto3" json:"tcp_rto_max,omitempty"`
	TcpMaxConn      int64  `protobuf:"varint,303,opt,name=tcp_max_conn,json=tcpMaxConn,proto3" json:"tcp_max_conn,omitempty"`
	TcpActiveOpens  uint64 `protobuf:"varint,304,opt,name=tcp_active_opens,json=tcpActiveOpens,proto3" json:"tcp_active_opens,omitempty"`
	TcpPassiveOpens uint64 `protobuf:"varint,305,opt,name=tcp_passive_opens,json=tcpPassiveOpens,proto3" json:"tcp_passive_opens,omitempty"`
	TcpAttemptFails uint64 `protobuf:"varint,306,opt,name=tcp_attempt_fails,json=tcpAttemptFails,proto3" json:"tcp_attempt_fails,omitempty"`
	TcpEstabResets  uint64 `protobuf:"varint,307,opt,name=tcp_estab_resets,json=tcpEstabResets,proto3" json:"tcp_estab_resets,omitempty"`
	TcpCurrEstab    uint64 `protobuf:"varint,308,opt,name=tcp_curr_estab,json=tcpCurrEstab,proto3" json:"tcp_curr_estab,omitempty"`
	TcpInSegs       uint64 `protobuf:"varint,309,opt,name=tcp_in_segs,json=tcpInSegs,proto3" json:"tcp_in_segs,omitempty"`
	TcpOutSegs      uint64 `protobuf:"varint,310,opt,name=tcp_out_segs,json=tcpOutSegs,proto3" json:"tcp_out_segs,omitempty"`
	TcpRetransSegs  uint64 `protobuf:"varint,311,opt,name=tcp_retrans_segs,json=tcpRetransSegs,proto3" json:"tcp_retrans_segs,omitempty"`
	TcpInErrs       uint64 `protobuf:"varint,312,opt,name=tcp_in_errs,json=tcpInErrs,proto3" json:"tcp_in_errs,omitempty"`
	TcpOutRsts      uint64 `protobuf:"varint,313,opt,name=tcp_out_rsts,json=tcpOutRsts,proto3" json:"tcp_out_rsts,omitempty"`
	TcpInCsumErrors uint64 `protobuf:"varint,314,opt,name=tcp_in_csum_errors,json=tcpInCsumErrors,proto3" json:"tcp_in_csum_errors,omitempty"`
	// tcp ext /proc/net/netstat
	TcpSyncookiesSent         uint64 `protobuf:"varint,400,opt,name=tcp_syncookies_sent,json=tcpSyncookiesSent,proto3" json:"tcp_syncookies_sent,omitempty"`
	TcpSyncookiesRecv         uint64 `protobuf:"varint,401,opt,name=tcp_syncookies_recv,json=tcpSyncookiesRecv,proto3" json:"tcp_syncookies_recv,omitempty"`
	TcpSyncookiesFailed       uint64 `protobuf:"varint,402,opt,name=tcp_syncookies_failed,json=tcpSyncookiesFailed,proto3" json:"tcp_syncookies_failed,omitempty"`
	TcpEmbryonicRsts          uint64 `protobuf:"varint,403,opt,name=tcp_embryonic_rsts,json=tcpEmbryonicRsts,proto3" json:"tcp_embryonic_rsts,omitempty"`
	TcpPruneCalled            uint64 `protobuf:"varint,404,opt,name=tcp_prune_called,json=tcpPruneCalled,proto3" json:"tcp_prune_called,omitempty"`
	TcpRcvPruned              uint64 `protobuf:"varint,405,opt,name=tcp_rcv_pruned,json=tcpRcvPruned,proto3" json:"tcp_rcv_pruned,omitempty"`
	TcpOfoPruned              uint64 `protobuf:"varint,406,opt,name=tcp_ofo_pruned,json=tcpOfoPruned,proto3" json:"tcp_ofo_pruned,omitempty"`
	TcpOutOfWindowIcmps       uint64 `protobuf:"varint,407,opt,name=tcp_out_of_window_icmps,json=tcpOutOfWindowIcmps,proto3" json:"tcp_out_of_window_icmps,omitempty"`
	TcpLockDroppedIcmps       uint64 `protobuf:"varint,408,opt,name=tcp_lock_dropped_icmps,json=tcpLockDroppedIcmps,proto3" json:"tcp_lock_dropped_icmps,omitempty"`
	TcpArpFilter              uint64 `protobuf:"varint,409,opt,name=tcp_arp_filter,json=tcpArpFilter,proto3" json:"tcp_arp_filter,omitempty"`
	TcpTw                     uint64 `protobuf:"varint,410,opt,name=tcp_tw,json=tcpTw,proto3" json:"tcp_tw,omitempty"`
	TcpTwRecycled             uint64 `protobuf:"varint,411,opt,name=tcp_tw_recycled,json=tcpTwRecycled,proto3" json:"tcp_tw_recycled,omitempty"`
	TcpTwKilled               uint64 `protobuf:"varint,412,opt,name=tcp_tw_killed,json=tcpTwKilled,proto3" json:"tcp_tw_killed,omitempty"`
	TcpPawsActive             uint64 `protobuf:"varint,413,opt,name=tcp_paws_active,json=tcpPawsActive,proto3" json:"tcp_paws_active,omitempty"`
	TcpPawsEstab              uint64 `protobuf:"varint,414,opt,name=tcp_paws_estab,json=tcpPawsEstab,proto3" json:"tcp_paws_estab,omitempty"`
	TcpDelayedAcks            uint64 `protobuf:"varint,415,opt,name=tcp_delayed_acks,json=tcpDelayedAcks,proto3" json:"tcp_delayed_acks,omitempty"`
	TcpDelayedAckLocked       uint64 `protobuf:"varint,416,opt,name=tcp_delayed_ack_locked,json=tcpDelayedAckLocked,proto3" json:"tcp_delayed_ack_locked,omitempty"`
	TcpDelayedAckLost         uint64 `protobuf:"varint,417,opt,name=tcp_delayed_ack_lost,json=tcpDelayedAckLost,proto3" json:"tcp_delayed_ack_lost,omitempty"`
	TcpListenOverflows        uint64 `protobuf:"varint,418,opt,name=tcp_listen_overflows,json=tcpListenOverflows,proto3" json:"tcp_listen_overflows,omitempty"`
	TcpListenDrops            uint64 `protobuf:"varint,419,opt,name=tcp_listen_drops,json=tcpListenDrops,proto3" json:"tcp_listen_drops,omitempty"`
	TcpHpHits                 uint64 `protobuf:"varint,420,opt,name=tcp_hp_hits,json=tcpHpHits,proto3" json:"tcp_hp_hits,omitempty"`
	TcpPureAcks               uint64 `protobuf:"varint,421,opt,name=tcp_pure_acks,json=tcpPureAcks,proto3" json:"tcp_pure_acks,omitempty"`
	TcpHpAcks                 uint64 `protobuf:"varint,422,opt,name=tcp_hp_acks,json=tcpHpAcks,proto3" json:"tcp_hp_acks,omitempty"`
	TcpRenoRecovery           uint64 `protobuf:"varint,423,opt,name=tcp_reno_recovery,json=tcpRenoRecovery,proto3" json:"tcp_reno_recovery,omitempty"`
	TcpSackRecovery           uint64 `protobuf:"varint,424,opt,name=tcp_sack_recovery,json=tcpSackRecovery,proto3" json:"tcp_sack_recovery,omitempty"`
	TcpSackReneging           uint64 `protobuf:"varint,425,opt,name=tcp_sack_reneging,json=tcpSackReneging,proto3" json:"tcp_sack_reneging,omitempty"`
	TcpSackReorder            uint64 `protobuf:"varint,426,opt,name=tcp_sack_reorder,json=tcpSackReorder,proto3" json:"tcp_sack_reorder,omitempty"`
	TcpRenoReorder            uint64 `protobuf:"varint,427,opt,name=tcp_reno_reorder,json=tcpRenoReorder,proto3" json:"tcp_reno_reorder,omitempty"`
	TcpTsReorder              uint64 `protobuf:"varint,428,opt,name=tcp_ts_reorder,json=tcpTsReorder,proto3" json:"tcp_ts_reorder,omitempty"`
	TcpFullUndo               uint64 `protobuf:"varint,429,opt,name=tcp_full_undo,json=tcpFullUndo,proto3" json:"tcp_full_undo,omitempty"`
	TcpPartialUndo            uint64 `protobuf:"varint,430,opt,name=tcp_partial_undo,json=tcpPartialUndo,proto3" json:"tcp_partial_undo,omitempty"`
	TcpDsackUndo              uint64 `protobuf:"varint,431,opt,name=tcp_dsack_undo,json=tcpDsackUndo,proto3" json:"tcp_dsack_undo,omitempty"`
	TcpLossUndo               uint64 `protobuf:"varint,432,opt,name=tcp_loss_undo,json=tcpLossUndo,proto3" json:"tcp_loss_undo,omitempty"`
	TcpLostRetransmit         uint64 `protobuf:"varint,433,opt,name=tcp_lost_retransmit,json=tcpLostRetransmit,proto3" json:"tcp_lost_retransmit,omitempty"`
	TcpRenoFailures           uint64 `protobuf:"varint,434,opt,name=tcp_reno_failures,json=tcpRenoFailures,proto3" json:"tcp_reno_failures,omitempty"`
	TcpSackFailures           uint64 `protobuf:"varint,435,opt,name=tcp_sack_failures,json=tcpSackFailures,proto3" json:"tcp_sack_failures,omitempty"`
	TcpLossFailures           uint64 `protobuf:"varint,436,opt,name=tcp_loss_failures,json=tcpLossFailures,proto3" json:"tcp_loss_failures,omitempty"`
	TcpFastRetrans            uint64 `protobuf:"varint,437,opt,name=tcp_fast_retrans,json=tcpFastRetrans,proto3" json:"tcp_fast_retrans,omitempty"`
	TcpSlowStartRetrans       uint64 `protobuf:"varint,438,opt,name=tcp_slow_start_retrans,json=tcpSlowStartRetrans,proto3" json:"tcp_slow_start_retrans,omitempty"`
	TcpTimeouts               uint64 `protobuf:"varint,439,opt,name=tcp_timeouts,json=tcpTimeouts,proto3" json:"tcp_timeouts,omitempty"`
	TcpLossProbes             uint64 `protobuf:"varint,440,opt,name=tcp_loss_probes,json=tcpLossProbes,proto3" json:"tcp_loss_probes,omitempty"`
	TcpLossProbeRecovery      uint64 `protobuf:"varint,441,opt,name=tcp_loss_probe_recovery,json=tcpLossProbeRecovery,proto3" json:"tcp_loss_probe_recovery,omitempty"`
	TcpRenoRecoveryFail       uint64 `protobuf:"varint,442,opt,name=tcp_reno_recovery_fail,json=tcpRenoRecoveryFail,proto3" json:"tcp_reno_recovery_fail,omitempty"`
	TcpSackRecoveryFail       uint64 `protobuf:"varint,443,opt,name=tcp_sack_recovery_fail,json=tcpSackRecoveryFail,proto3" json:"tcp_sack_recovery_fail,omitempty"`
	TcpRcvCollapsed           uint64 `protobuf:"varint,444,opt,name=tcp_rcv_collapsed,json=tcpRcvCollapsed,proto3" json:"tcp_rcv_collapsed,omitempty"`
	TcpBacklogCoalesce        uint64 `protobuf:"varint,445,opt,name=tcp_backlog_coalesce,json=tcpBacklogCoalesce,proto3" json:"tcp_backlog_coalesce,omitempty"`
	TcpDsackOldSent           uint64 `protobuf:"varint,446,opt,name=tcp_dsack_old_sent,json=tcpDsackOldSent,proto3" json:"tcp_dsack_old_sent,omitempty"`
	TcpDsackOfoSent           uint64 `protobuf:"varint,447,opt,name=tcp_dsack_ofo_sent,json=tcpDsackOfoSent,proto3" json:"tcp_dsack_ofo_sent,omitempty"`
	TcpDsackRecv              uint64 `protobuf:"varint,448,opt,name=tcp_dsack_recv,json=tcpDsackRecv,proto3" json:"tcp_dsack_recv,omitempty"`
	TcpDsackOfoRecv           uint64 `protobuf:"varint,449,opt,name=tcp_dsack_ofo_recv,json=tcpDsackOfoRecv,proto3" json:"tcp_dsack_ofo_recv,omitempty"`
	TcpAbortOnData            uint64 `protobuf:"varint,450,opt,name=tcp_abort_on_data,json=tcpAbortOnData,proto3" json:"tcp_abort_on_data,omitempty"`
	TcpAbortOnClose           uint64 `protobuf:"varint,451,opt,name=tcp_abort_on_close,json=tcpAbortOnClose,proto3" json:"tcp_abort_on_close,omitempty"`
	TcpAbortOnMemory          uint64 `protobuf:"varint,452,opt,name=tcp_abort_on_memory,json=tcpAbortOnMemory,proto3" json:"tcp_abort_on_memory,omitempty"`
	TcpAbortOnTimeout         uint64 `protobuf:"varint,453,opt,name=tcp_abort_on_timeout,json=tcpAbortOnTimeout,proto3" json:"tcp_abort_on_timeout,omitempty"`
	TcpAbortOnLinger          uint64 `protobuf:"varint,454,opt,name=tcp_abort_on_linger,json=tcpAbortOnLinger,proto3" json:"tcp_abort_on_linger,omitempty"`
	TcpAbortFailed            uint64 `protobuf:"varint,455,opt,name=tcp_abort_failed,json=tcpAbortFailed,proto3" json:"tcp_abort_failed,omitempty"`
	TcpMemoryPressures        uint64 `protobuf:"varint,456,opt,name=tcp_memory_pressures,json=tcpMemoryPressures,proto3" json:"tcp_memory_pressures,omitempty"`
	TcpMemoryPressuresChrono  uint64 `protobuf:"varint,457,opt,name=tcp_memory_pressures_chrono,json=tcpMemoryPressuresChrono,proto3" json:"tcp_memory_pressures_chrono,omitempty"`
	TcpSackDiscard            uint64 `protobuf:"varint,458,opt,name=tcp_sack_discard,json=tcpSackDiscard,proto3" json:"tcp_sack_discard,omitempty"`
	TcpDsackIgnoredOld        uint64 `protobuf:"varint,459,opt,name=tcp_dsack_ignored_old,json=tcpDsackIgnoredOld,proto3" json:"tcp_dsack_ignored_old,omitempty"`
	TcpDsackIgnoredNoUndo     uint64 `protobuf:"varint,460,opt,name=tcp_dsack_ignored_no_undo,json=tcpDsackIgnoredNoUndo,proto3" json:"tcp_dsack_ignored_no_undo,omitempty"`
	TcpSpuriousRtos           uint64 `protobuf:"varint,461,opt,name=tcp_spurious_rtos,json=tcpSpuriousRtos,proto3" json:"tcp_spurious_rtos,omitempty"`
	TcpMd5NotFound            uint64 `protobuf:"varint,462,opt,name=tcp_md5_not_found,json=tcpMd5NotFound,proto3" json:"tcp_md5_not_found,omitempty"`
	TcpMd5Unexpected          uint64 `protobuf:"varint,463,opt,name=tcp_md5_unexpected,json=tcpMd5Unexpected,proto3" json:"tcp_md5_unexpected,omitempty"`
	TcpMd5Failure             uint64 `protobuf:"varint,464,opt,name=tcp_md5_failure,json=tcpMd5Failure,proto3" json:"tcp_md5_failure,omitempty"`
	TcpSackShifted            uint64 `protobuf:"varint,465,opt,name=tcp_sack_shifted,json=tcpSackShifted,proto3" json:"tcp_sack_shifted,omitempty"`
	TcpSackMerged             uint64 `protobuf:"varint,466,opt,name=tcp_sack_merged,json=tcpSackMerged,proto3" json:"tcp_sack_merged,omitempty"`
	TcpSackShiftFallback      uint64 `protobuf:"varint,467,opt,name=tcp_sack_shift_fallback,json=tcpSackShiftFallback,proto3" json:"tcp_sack_shift_fallback,omitempty"`
	TcpBacklogDrop            uint64 `protobuf:"varint,468,opt,name=tcp_backlog_drop,json=tcpBacklogDrop,proto3" json:"tcp_backlog_drop,omitempty"`
	TcpPfMemallocDrop         uint64 `protobuf:"varint,469,opt,name=tcp_pf_memalloc_drop,json=tcpPfMemallocDrop,proto3" json:"tcp_pf_memalloc_drop,omitempty"`
	TcpMinTtlDrop             uint64 `protobuf:"varint,470,opt,name=tcp_min_ttl_drop,json=tcpMinTtlDrop,proto3" json:"tcp_min_ttl_drop,omitempty"`
	TcpDeferAcceptDrop        uint64 `protobuf:"varint,471,opt,name=tcp_defer_accept_drop,json=tcpDeferAcceptDrop,proto3" json:"tcp_defer_accept_drop,omitempty"`
	TcpIpReversePathFilter    uint64 `protobuf:"varint,472,opt,name=tcp_ip_reverse_path_filter,json=tcpIpReversePathFilter,proto3" json:"tcp_ip_reverse_path_filter,omitempty"`
	TcpTimeWaitOverflow       uint64 `protobuf:"varint,473,opt,name=tcp_time_wait_overflow,json=tcpTimeWaitOverflow,proto3" json:"tcp_time_wait_overflow,omitempty"`
	TcpReqQFullDoCookies      uint64 `protobuf:"varint,474,opt,name=tcp_req_q_full_do_cookies,json=tcpReqQFullDoCookies,proto3" json:"tcp_req_q_full_do_cookies,omitempty"`
	TcpReqQFullDrop           uint64 `protobuf:"varint,475,opt,name=tcp_req_q_full_drop,json=tcpReqQFullDrop,proto3" json:"tcp_req_q_full_drop,omitempty"`
	TcpRetransFail            uint64 `protobuf:"varint,476,opt,name=tcp_retrans_fail,json=tcpRetransFail,proto3" json:"tcp_retrans_fail,omitempty"`
	TcpRcvCoalesce            uint64 `protobuf:"varint,477,opt,name=tcp_rcv_coalesce,json=tcpRcvCoalesce,proto3" json:"tcp_rcv_coalesce,omitempty"`
	TcpOfoQueue               uint64 `protobuf:"varint,478,opt,name=tcp_ofo_queue,json=tcpOfoQueue,proto3" json:"tcp_ofo_queue,omitempty"`
	TcpOfoDrop                uint64 `protobuf:"varint,479,opt,name=tcp_ofo_drop,json=tcpOfoDrop,proto3" json:"tcp_ofo_drop,omitempty"`
	TcpOfoMerge               uint64 `protobuf:"varint,480,opt,name=tcp_ofo_merge,json=tcpOfoMerge,proto3" json:"tcp_ofo_merge,omitempty"`
	TcpChallengeAck           uint64 `protobuf:"varint,481,opt,name=tcp_challenge_ack,json=tcpChallengeAck,proto3" json:"tcp_challenge_ack,omitempty"`
	TcpSynChallenge           uint64 `protobuf:"varint,482,opt,name=tcp_syn_challenge,json=tcpSynChallenge,proto3" json:"tcp_syn_challenge,omitempty"`
	TcpFastOpenActive         uint64 `protobuf:"varint,483,opt,name=tcp_fast_open_active,json=tcpFastOpenActive,proto3" json:"tcp_fast_open_active,omitempty"`
	TcpFastOpenActiveFail     uint64 `protobuf:"varint,484,opt,name=tcp_fast_open_active_fail,json=tcpFastOpenActiveFail,proto3" json:"tcp_fast_open_active_fail,omitempty"`
	TcpFastOpenPassive        uint64 `protobuf:"varint,485,opt,name=tcp_fast_open_passive,json=tcpFastOpenPassive,proto3" json:"tcp_fast_open_passive,omitempty"`
	TcpFastOpenPassiveFail    uint64 `protobuf:"varint,486,opt,name=tcp_fast_open_passive_fail,json=tcpFastOpenPassiveFail,proto3" json:"tcp_fast_open_passive_fail,omitempty"`
	TcpFastOpenListenOverflow uint64 `protobuf:"varint,487,opt,name=tcp_fast_open_listen_overflow,json=tcpFastOpenListenOverflow,proto3" json:"tcp_fast_open_listen_overflow,omitempty"`
	TcpFastOpenCookieReqd     uint64 `protobuf:"varint,488,opt,name=tcp_fast_open_cookie_reqd,json=tcpFastOpenCookieReqd,proto3" json:"tcp_fast_open_cookie_reqd,omitempty"`
	TcpFastOpenBlackhole      uint64 `protobuf:"varint,489,opt,name=tcp_fast_open_blackhole,json=tcpFastOpenBlackhole,proto3" json:"tcp_fast_open_blackhole,omitempty"`
	TcpSpuriousRtxHostQueues  uint64 `protobuf:"varint,490,opt,name=tcp_spurious_rtx_host_queues,json=tcpSpuriousRtxHostQueues,proto3" json:"tcp_spurious_rtx_host_queues,omitempty"`
	TcpBusyPollRxPackets      uint64 `protobuf:"varint,491,opt,name=tcp_busy_poll_rx_packets,json=tcpBusyPollRxPackets,proto3" json:"tcp_busy_poll_rx_packets,omitempty"`
	TcpAutoCorking            uint64 `protobuf:"varint,492,opt,name=tcp_auto_corking,json=tcpAutoCorking,proto3" json:"tcp_auto_corking,omitempty"`
	TcpFromZeroWindowAdv      uint64 `protobuf:"varint,493,opt,name=tcp_from_zero_window_adv,json=tcpFromZeroWindowAdv,proto3" json:"tcp_from_zero_window_adv,omitempty"`
	TcpToZeroWindowAdv        uint64 `protobuf:"varint,494,opt,name=tcp_to_zero_window_adv,json=tcpToZeroWindowAdv,proto3" json:"tcp_to_zero_window_adv,omitempty"`
	TcpWantZeroWindowAdv      uint64 `protobuf:"varint,495,opt,name=tcp_want_zero_window_adv,json=tcpWantZeroWindowAdv,proto3" json:"tcp_want_zero_window_adv,omitempty"`
	TcpSynRetrans             uint64 `protobuf:"varint,496,opt,name=tcp_syn_retrans,json=tcpSynRetrans,proto3" json:"tcp_syn_retrans,omitempty"`
	TcpOrigDataSent           uint64 `protobuf:"varint,497,opt,name=tcp_orig_data_sent,json=tcpOrigDataSent,proto3" json:"tcp_orig_data_sent,omitempty"`
	TcpHystartTrainDetect     uint64 `protobuf:"varint,498,opt,name=tcp_hystart_train_detect,json=tcpHystartTrainDetect,proto3" json:"tcp_hystart_train_detect,omitempty"`
	TcpHystartTrainCwnd       uint64 `protobuf:"varint,499,opt,name=tcp_hystart_train_cwnd,json=tcpHystartTrainCwnd,proto3" json:"tcp_hystart_train_cwnd,omitempty"`
	TcpHystartDelayDetect     uint64 `protobuf:"varint,500,opt,name=tcp_hystart_delay_detect,json=tcpHystartDelayDetect,proto3" json:"tcp_hystart_delay_detect,omitempty"`
	TcpHystartDelayCwnd       uint64 `protobuf:"varint,501,opt,name=tcp_hystart_delay_cwnd,json=tcpHystartDelayCwnd,proto3" json:"tcp_hystart_delay_cwnd,omitempty"`
	TcpAckSkippedSynRecv      uint64 `protobuf:"varint,502,opt,name=tcp_ack_skipped_syn_recv,json=tcpAckSkippedSynRecv,proto3" json:"tcp_ack_skipped_syn_recv,omitempty"`
	TcpAckSkippedPaws         uint64 `protobuf:"varint,503,opt,name=tcp_ack_skipped_paws,json=tcpAckSkippedPaws,proto3" json:"tcp_ack_skipped_paws,omitempty"`
	TcpAckSkippedSeq          uint64 `protobuf:"varint,504,opt,name=tcp_ack_skipped_seq,json=tcpAckSkippedSeq,proto3" json:"tcp_ack_skipped_seq,omitempty"`
	TcpAckSkippedFinWait2     uint64 `protobuf:"varint,505,opt,name=tcp_ack_skipped_fin_wait2,json=tcpAckSkippedFinWait2,proto3" json:"tcp_ack_skipped_fin_wait2,omitempty"`
	TcpAckSkippedTimeWait     uint64 `protobuf:"varint,506,opt,name=tcp_ack_skipped_time_wait,json=tcpAckSkippedTimeWait,proto3" json:"tcp_ack_skipped_time_wait,omitempty"`
	TcpAckSkippedChallenge    uint64 `protobuf:"varint,507,opt,name=tcp_ack_skipped_challenge,json=tcpAckSkippedChallenge,proto3" json:"tcp_ack_skipped_challenge,omitempty"`
	TcpWinProbe               uint64 `protobuf:"varint,508,opt,name=tcp_win_probe,json=tcpWinProbe,proto3" json:"tcp_win_probe,omitempty"`
	TcpKeepAlive              uint64 `protobuf:"varint,509,opt,name=tcp_keep_alive,json=tcpKeepAlive,proto3" json:"tcp_keep_alive,omitempty"`
	TcpMtupFail               uint64 `protobuf:"varint,510,opt,name=tcp_mtup_fail,json=tcpMtupFail,proto3" json:"tcp_mtup_fail,omitempty"`
	TcpMtupSuccess            uint64 `protobuf:"varint,511,opt,name=tcp_mtup_success,json=tcpMtupSuccess,proto3" json:"tcp_mtup_success,omitempty"`
	TcpDelivered              uint64 `protobuf:"varint,512,opt,name=tcp_delivered,json=tcpDelivered,proto3" json:"tcp_delivered,omitempty"`
	TcpDeliveredCe            uint64 `protobuf:"varint,513,opt,name=tcp_delivered_ce,json=tcpDeliveredCe,proto3" json:"tcp_delivered_ce,omitempty"`
	TcpAckCompressed          uint64 `protobuf:"varint,514,opt,name=tcp_ack_compressed,json=tcpAckCompressed,proto3" json:"tcp_ack_compressed,omitempty"`
	TcpZeroWindowDrop         uint64 `protobuf:"varint,515,opt,name=tcp_zero_window_drop,json=tcpZeroWindowDrop,proto3" json:"tcp_zero_window_drop,omitempty"`
	TcpRcvQDrop               uint64 `protobuf:"varint,516,opt,name=tcp_rcv_q_drop,json=tcpRcvQDrop,proto3" json:"tcp_rcv_q_drop,omitempty"`
	TcpWqueueTooBig           uint64 `protobuf:"varint,517,opt,name=tcp_wqueue_too_big,json=tcpWqueueTooBig,proto3" json:"tcp_wqueue_too_big,omitempty"`
	TcpFastOpenPassiveAltKey  uint64 `protobuf:"varint,518,opt,name=tcp_fast_open_passive_alt_key,json=tcpFastOpenPassiveAltKey,proto3" json:"tcp_fast_open_passive_alt_key,omitempty"`
	TcpTimeoutRehash          uint64 `protobuf:"varint,519,opt,name=tcp_timeout_rehash,json=tcpTimeoutRehash,proto3" json:"tcp_timeout_rehash,omitempty"`
	TcpDuplicateDataRehash    uint64 `protobuf:"varint,520,opt,name=tcp_duplicate_data_rehash,json=tcpDuplicateDataRehash,proto3" json:"tcp_duplicate_data_rehash,omitempty"`
	TcpDsackRecvSegs          uint64 `protobuf:"varint,521,opt,name=tcp_dsack_recv_segs,json=tcpDsackRecvSegs,proto3" json:"tcp_dsack_recv_segs,omitempty"`
	TcpDsackIgnoredDubious    uint64 `protobuf:"varint,522,opt,name=tcp_dsack_ignored_dubious,json=tcpDsackIgnoredDubious,proto3" json:"tcp_dsack_ignored_dubious,omitempty"`
	TcpMigrateReqSuccess      uint64 `protobuf:"varint,523,opt,name=tcp_migrate_req_success,json=tcpMigrateReqSuccess,proto3" json:"tcp_migrate_req_success,omitempty"`
	TcpMigrateReqFailure      uint64 `protobuf:"varint,524,opt,name=tcp_migrate_req_failure,json=tcpMigrateReqFailure,proto3" json:"tcp_migrate_req_failure,omitempty"`
	TcpPlbRehash              uint64 `protobuf:"varint,525,opt,name=tcp_plb_rehash,json=tcpPlbRehash,proto3" json:"tcp_plb_rehash,omitempty"`
	// icmp /proc/net/snmp
	IcmpInMsgs             uint64 `protobuf:"varint,700,opt,name=icmp_in_msgs,json=icmpInMsgs,proto3" json:"icmp_in_msgs,omitempty"`
	IcmpInErrors           uint64 `protobuf:"varint,701,opt,name=icmp_in_errors,json=icmpInErrors,proto3" json:"icmp_in_errors,omitempty"`
	IcmpInCsumErrors       uint64 `protobuf:"varint,702,opt,name=icmp_in_csum_errors,json=icmpInCsumErrors,proto3" json:"icmp_in_csum_errors,omitempty"`
	IcmpInDestUnreachs     uint64 `protobuf:"varint,703,opt,name=icmp_in_dest_unreachs,json=icmpInDestUnreachs,proto3" json:"icmp_in_dest_unreachs,omitempty"`
	IcmpInTimeExcds        uint64 `protobuf:"varint,704,opt,name=icmp_in_time_excds,json=icmpInTimeExcds,proto3" json:"icmp_in_time_excds,omitempty"`
	IcmpInParmProbs        uint64 `protobuf:"varint,705,opt,name=icmp_in_parm_probs,json=icmpInParmProbs,proto3" json:"icmp_in_parm_probs,omitempty"`
	IcmpInSrcQuenchs       uint64 `protobuf:"varint,706,opt,name=icmp_in_src_quenchs,json=icmpInSrcQuenchs,proto3" json:"icmp_in_src_quenchs,omitempty"`
	IcmpInRedirects        uint64 `protobuf:"varint,707,opt,name=icmp_in_redirects,json=icmpInRedirects,proto3" json:"icmp_in_redirects,omitempty"`
	IcmpInEchos            uint64 `protobuf:"varint,708,opt,name=icmp_in_echos,json=icmpInEchos,proto3" json:"icmp_in_echos,omitempty"`
	IcmpInEchoReps         uint64 `protobuf:"varint,709,opt,name=icmp_in_echo_reps,json=icmpInEchoReps,proto3" json:"icmp_in_echo_reps,omitempty"`
	IcmpInTimestamps       uint64 `protobuf:"varint,710,opt,name=icmp_in_timestamps,json=icmpInTimestamps,proto3" json:"icmp_in_timestamps,omitempty"`
	IcmpInTimestampReps    uint64 `protobuf:"varint,711,opt,name=icmp_in_timestamp_reps,json=icmpInTimestampReps,proto3" json:"icmp_in_timestamp_reps,omitempty"`
	IcmpInAddrMasks        uint64 `protobuf:"varint,712,opt,name=icmp_in_addr_masks,json=icmpInAddrMasks,proto3" json:"icmp_in_addr_masks,omitempty"`
	IcmpInAddrMaskReps     uint64 `protobuf:"varint,713,opt,name=icmp_in_addr_mask_reps,json=icmpInAddrMaskReps,proto3" json:"icmp_in_addr_mask_reps,omitempty"`
	IcmpOutMsgs            uint64 `protobuf:"varint,714,opt,name=icmp_out_msgs,json=icmpOutMsgs,proto3" json:"icmp_out_msgs,omitempty"`
	IcmpOutErrors          uint64 `protobuf:"varint,715,opt,name=icmp_out_errors,json=icmpOutErrors,proto3" json:"icmp_out_errors,omitempty"`
	IcmpOutRateLimitGlobal uint64 `protobuf:"varint,716,opt,name=icmp_out_rate_limit_global,json=icmpOutRateLimitGlobal,proto3" json:"icmp_out_rate_limit_global,omitempty"`
	IcmpOutRateLimitHost   uint64 `protobuf:"varint,717,opt,name=icmp_out_rate_limit_host,json=icmpOutRateLimitHost,proto3" json:"icmp_out_rate_limit_host,omitempty"`
	IcmpOutDestUnreachs    uint64 `protobuf:"varint,718,opt,name=icmp_out_dest_unreachs,json=icmpOutDestUnreachs,proto3" json:"icmp_out_dest_unreachs,omitempty"`
	IcmpOutTimeExcds       uint64 `protobuf:"varint,719,opt,name=icmp_out_time_excds,json=icmpOutTimeExcds,proto3" json:"icmp_out_time_excds,omitempty"`
	IcmpOutParmProbs       uint64 `protobuf:"varint,720,opt,name=icmp_out_parm_probs,json=icmpOutParmProbs,proto3" json:"icmp_out_parm_probs,omitempty"`
	IcmpOutSrcQuenchs      uint64 `protobuf:"varint,721,opt,name=icmp_out_src_quenchs,json=icmpOutSrcQuenchs,proto3" json:"icmp_out_src_quenchs,omitempty"`
	IcmpOutRedirects       uint64 `protobuf:"varint,722,opt,name=icmp_out_redirects,json=icmpOutRedirects,proto3" json:"icmp_out_redirects,omitempty"`
	IcmpOutEchos           uint64 `protobuf:"varint,723,opt,name=icmp_out_echos,json=icmpOutEchos,proto3" json:"icmp_out_echos,omitempty"`
	IcmpOutEchoReps        uint64 `protobuf:"varint,724,opt,name=icmp_out_echo_reps,json=icmpOutEchoReps,proto3" json:"icmp_out_echo_reps,omitempty"`
	IcmpOutTimestamps      uint64 `protobuf:"varint,725,opt,name=icmp_out_timestamps,json=icmpOutTimestamps,proto3" json:"icmp_out_timestamps,omitempty"`
	IcmpOutTimestampReps   uint64 `protobuf:"varint,726,opt,name=icmp_out_timestamp_reps,json=icmpOutTimestampReps,proto3" json:"icmp_out_timestamp_reps,omitempty"`
	IcmpOutAddrMasks       uint64 `protobuf:"varint,727,opt,name=icmp_out_addr_masks,json=icmpOutAddrMasks,proto3" json:"icmp_out_addr_masks,omitempty"`
	IcmpOutAddrMaskReps    uint64 `protobuf:"varint,728,opt,name=icmp_out_addr_mask_reps,json=icmpOutAddrMaskReps,proto3" json:"icmp_out_addr_mask_reps,omitempty"`
}

func (x *NetstatMetric) Reset() {
	*x = NetstatMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tcpmon_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetstatMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetstatMetric) ProtoMessage() {}

func (x *NetstatMetric) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tcpmon_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetstatMetric.ProtoReflect.Descriptor instead.
func (*NetstatMetric) Descriptor() ([]byte, []int) {
	return file_proto_tcpmon_proto_rawDescGZIP(), []int{8}
}

func (x *NetstatMetric) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *NetstatMetric) GetType() MetricType {
	if x != nil {
		return x.Type
	}
	return MetricType_TCP
}

func (x *NetstatMetric) GetIpForwarding() uint64 {
	if x != nil {
		return x.IpForwarding
	}
	return 0
}

func (x *NetstatMetric) GetIpDefaultTtl() uint64 {
	if x != nil {
		return x.IpDefaultTtl
	}
	return 0
}

func (x *NetstatMetric) GetIpInReceives() uint64 {
	if x != nil {
		return x.IpInReceives
	}
	return 0
}

func (x *NetstatMetric) GetIpInHdrErrors() uint64 {
	if x != nil {
		return x.IpInHdrErrors
	}
	return 0
}

func (x *NetstatMetric) GetIpInAddrErrors() uint64 {
	if x != nil {
		return x.IpInAddrErrors
	}
	return 0
}

func (x *NetstatMetric) GetIpForwDatagrams() uint64 {
	if x != nil {
		return x.IpForwDatagrams
	}
	return 0
}

func (x *NetstatMetric) GetIpInUnknownProtos() uint64 {
	if x != nil {
		return x.IpInUnknownProtos
	}
	return 0
}

func (x *NetstatMetric) GetIpInDiscards() uint64 {
	if x != nil {
		return x.IpInDiscards
	}
	return 0
}

func (x *NetstatMetric) GetIpInDelivers() uint64 {
	if x != nil {
		return x.IpInDelivers
	}
	return 0
}

func (x *NetstatMetric) GetIpOutRequests() uint64 {
	if x != nil {
		return x.IpOutRequests
	}
	return 0
}

func (x *NetstatMetric) GetIpOutDiscards() uint64 {
	if x != nil {
		return x.IpOutDiscards
	}
	return 0
}

func (x *NetstatMetric) GetIpOutNoRoutes() uint64 {
	if x != nil {
		return x.IpOutNoRoutes
	}
	return 0
}

func (x *NetstatMetric) GetIpReasmTimeout() uint64 {
	if x != nil {
		return x.IpReasmTimeout
	}
	return 0
}

func (x *NetstatMetric) GetIpReasmReqds() uint64 {
	if x != nil {
		return x.IpReasmReqds
	}
	return 0
}

func (x *NetstatMetric) GetIpReasmOks() uint64 {
	if x != nil {
		return x.IpReasmOks
	}
	return 0
}

func (x *NetstatMetric) GetIpReasmFails() uint64 {
	if x != nil {
		return x.IpReasmFails
	}
	return 0
}

func (x *NetstatMetric) GetIpFragOks() uint64 {
	if x != nil {
		return x.IpFragOks
	}
	return 0
}

func (x *NetstatMetric) GetIpFragFails() uint64 {
	if x != nil {
		return x.IpFragFails
	}
	return 0
}

func (x *NetstatMetric) GetIpFragCreates() uint64 {
	if x != nil {
		return x.IpFragCreates
	}
	return 0
}

func (x *NetstatMetric) GetIpInNoRoutes() uint64 {
	if x != nil {
		return x.IpInNoRoutes
	}
	return 0
}

func (x *NetstatMetric) GetIpInTruncatedPkts() uint64 {
	if x != nil {
		return x.IpInTruncatedPkts
	}
	return 0
}

func (x *NetstatMetric) GetIpInMcastPkts() uint64 {
	if x != nil {
		return x.IpInMcastPkts
	}
	return 0
}

func (x *NetstatMetric) GetIpOutMcastPkts() uint64 {
	if x != nil {
		return x.IpOutMcastPkts
	}
	return 0
}

func (x *NetstatMetric) GetIpInBcastPkts() uint64 {
	if x != nil {
		return x.IpInBcastPkts
	}
	return 0
}

func (x *NetstatMetric) GetIpOutBcastPkts() uint64 {
	if x != nil {
		return x.IpOutBcastPkts
	}
	return 0
}

func (x *NetstatMetric) GetIpInOctets() uint64 {
	if x != nil {
		return x.IpInOctets
	}
	return 0
}

func (x *NetstatMetric) GetIpOutOctets() uint64 {
	if x != nil {
		return x.IpOutOctets
	}
	return 0
}

func (x *NetstatMetric) GetIpInMcastOctets() uint64 {
	if x != nil {
		return x.IpInMcastOctets
	}
	return 0
}

func (x *NetstatMetric) GetIpOutMcastOctets() uint64 {
	if x != nil {
		return x.IpOutMcastOctets
	}
	return 0
}

func (x *NetstatMetric) GetIpInBcastOctets() uint64 {
	if x != nil {
		return x.IpInBcastOctets
	}
	return 0
}

func (x *NetstatMetric) GetIpOutBcastOctets() uint64 {
	if x != nil {
		return x.IpOutBcastOctets
	}
	return 0
}

func (x *NetstatMetric) GetIpInCsumErrors() uint64 {
	if x != nil {
		return x.IpInCsumErrors
	}
	return 0
}

func (x *NetstatMetric) GetIpInNoEctPkts() uint64 {
	if x != nil {
		return x.IpInNoEctPkts
	}
	return 0
}

func (x *NetstatMetric) GetIpInEct1Pkts() uint64 {
	if x != nil {
		return x.IpInEct1Pkts
	}
	return 0
}

func (x *NetstatMetric) GetIpInEct0Pkts() uint64 {
	if x != nil {
		return x.IpInEct0Pkts
	}
	return 0
}

func (x *NetstatMetric) GetIpInCePkts() uint64 {
	if x != nil {
		return x.IpInCePkts
	}
	return 0
}

func (x *NetstatMetric) GetIpReasmOverlaps() uint64 {
	if x != nil {
		return x.IpReasmOverlaps
	}
	return 0
}

func (x *NetstatMetric) GetUdpInDatagrams() uint64 {
	if x != nil {
		return x.UdpInDatagrams
	}
	return 0
}

func (x *NetstatMetric) GetUdpNoPorts() uint64 {
	if x != nil {
		return x.UdpNoPorts
	}
	return 0
}

func (x *NetstatMetric) GetUdpInErrors() uint64 {
	if x != nil {
		return x.UdpInErrors
	}
	return 0
}

func (x *NetstatMetric) GetUdpOutDatagrams() uint64 {
	if x != nil {
		return x.UdpOutDatagrams
	}
	return 0
}

func (x *NetstatMetric) GetUdpRcvbufErrors() uint64 {
	if x != nil {
		return x.UdpRcvbufErrors
	}
	return 0
}

func (x *NetstatMetric) GetUdpSndbufErrors() uint64 {
	if x != nil {
		return x.UdpSndbufErrors
	}
	return 0
}

func (x *NetstatMetric) GetUdpInCsumErrors() uint64 {
	if x != nil {
		return x.UdpInCsumErrors
	}
	return 0
}

func (x *NetstatMetric) GetUdpIgnoredMulti() uint64 {
	if x != nil {
		return x.UdpIgnoredMulti
	}
	return 0
}

func (x *NetstatMetric) GetUdpMemErrors() uint64 {
	if x != nil {
		return x.UdpMemErrors
	}
	return 0
}

func (x *NetstatMetric) GetTcpRtoAlgorithm() uint64 {
	if x != nil {
		return x.TcpRtoAlgorithm
	}
	return 0
}

func (x *NetstatMetric) GetTcpRtoMin() uint64 {
	if x != nil {
		return x.TcpRtoMin
	}
	return 0
}

func (x *NetstatMetric) GetTcpRtoMax() uint64 {
	if x != nil {
		return x.TcpRtoMax
	}
	return 0
}

func (x *NetstatMetric) GetTcpMaxConn() int64 {
	if x != nil {
		return x.TcpMaxConn
	}
	return 0
}

func (x *NetstatMetric) GetTcpActiveOpens() uint64 {
	if x != nil {
		return x.TcpActiveOpens
	}
	return 0
}

func (x *NetstatMetric) GetTcpPassiveOpens() uint64 {
	if x != nil {
		return x.TcpPassiveOpens
	}
	return 0
}

func (x *NetstatMetric) GetTcpAttemptFails() uint64 {
	if x != nil {
		return x.TcpAttemptFails
	}
	return 0
}

func (x *NetstatMetric) GetTcpEstabResets() uint64 {
	if x != nil {
		return x.TcpEstabResets
	}
	return 0
}

func (x *NetstatMetric) GetTcpCurrEstab() uint64 {
	if x != nil {
		return x.TcpCurrEstab
	}
	return 0
}

func (x *NetstatMetric) GetTcpInSegs() uint64 {
	if x != nil {
		return x.TcpInSegs
	}
	return 0
}

func (x *NetstatMetric) GetTcpOutSegs() uint64 {
	if x != nil {
		return x.TcpOutSegs
	}
	return 0
}

func (x *NetstatMetric) GetTcpRetransSegs() uint64 {
	if x != nil {
		return x.TcpRetransSegs
	}
	return 0
}

func (x *NetstatMetric) GetTcpInErrs() uint64 {
	if x != nil {
		return x.TcpInErrs
	}
	return 0
}

func (x *NetstatMetric) GetTcpOutRsts() uint64 {
	if x != nil {
		return x.TcpOutRsts
	}
	return 0
}

func (x *NetstatMetric) GetTcpInCsumErrors() uint64 {
	if x != nil {
		return x.TcpInCsumErrors
	}
	return 0
}

func (x *NetstatMetric) GetTcpSyncookiesSent() uint64 {
	if x != nil {
		return x.TcpSyncookiesSent
	}
	return 0
}

func (x *NetstatMetric) GetTcpSyncookiesRecv() uint64 {
	if x != nil {
		return x.TcpSyncookiesRecv
	}
	return 0
}

func (x *NetstatMetric) GetTcpSyncookiesFailed() uint64 {
	if x != nil {
		return x.TcpSyncookiesFailed
	}
	return 0
}

func (x *NetstatMetric) GetTcpEmbryonicRsts() uint64 {
	if x != nil {
		return x.TcpEmbryonicRsts
	}
	return 0
}

func (x *NetstatMetric) GetTcpPruneCalled() uint64 {
	if x != nil {
		return x.TcpPruneCalled
	}
	return 0
}

func (x *NetstatMetric) GetTcpRcvPruned() uint64 {
	if x != nil {
		return x.TcpRcvPruned
	}
	return 0
}

func (x *NetstatMetric) GetTcpOfoPruned() uint64 {
	if x != nil {
		return x.TcpOfoPruned
	}
	return 0
}

func (x *NetstatMetric) GetTcpOutOfWindowIcmps() uint64 {
	if x != nil {
		return x.TcpOutOfWindowIcmps
	}
	return 0
}

func (x *NetstatMetric) GetTcpLockDroppedIcmps() uint64 {
	if x != nil {
		return x.TcpLockDroppedIcmps
	}
	return 0
}

func (x *NetstatMetric) GetTcpArpFilter() uint64 {
	if x != nil {
		return x.TcpArpFilter
	}
	return 0
}

func (x *NetstatMetric) GetTcpTw() uint64 {
	if x != nil {
		return x.TcpTw
	}
	return 0
}

func (x *NetstatMetric) GetTcpTwRecycled() uint64 {
	if x != nil {
		return x.TcpTwRecycled
	}
	return 0
}

func (x *NetstatMetric) GetTcpTwKilled() uint64 {
	if x != nil {
		return x.TcpTwKilled
	}
	return 0
}

func (x *NetstatMetric) GetTcpPawsActive() uint64 {
	if x != nil {
		return x.TcpPawsActive
	}
	return 0
}

func (x *NetstatMetric) GetTcpPawsEstab() uint64 {
	if x != nil {
		return x.TcpPawsEstab
	}
	return 0
}

func (x *NetstatMetric) GetTcpDelayedAcks() uint64 {
	if x != nil {
		return x.TcpDelayedAcks
	}
	return 0
}

func (x *NetstatMetric) GetTcpDelayedAckLocked() uint64 {
	if x != nil {
		return x.TcpDelayedAckLocked
	}
	return 0
}

func (x *NetstatMetric) GetTcpDelayedAckLost() uint64 {
	if x != nil {
		return x.TcpDelayedAckLost
	}
	return 0
}

func (x *NetstatMetric) GetTcpListenOverflows() uint64 {
	if x != nil {
		return x.TcpListenOverflows
	}
	return 0
}

func (x *NetstatMetric) GetTcpListenDrops() uint64 {
	if x != nil {
		return x.TcpListenDrops
	}
	return 0
}

func (x *NetstatMetric) GetTcpHpHits() uint64 {
	if x != nil {
		return x.TcpHpHits
	}
	return 0
}

func (x *NetstatMetric) GetTcpPureAcks() uint64 {
	if x != nil {
		return x.TcpPureAcks
	}
	return 0
}

func (x *NetstatMetric) GetTcpHpAcks() uint64 {
	if x != nil {
		return x.TcpHpAcks
	}
	return 0
}

func (x *NetstatMetric) GetTcpRenoRecovery() uint64 {
	if x != nil {
		return x.TcpRenoRecovery
	}
	return 0
}

func (x *NetstatMetric) GetTcpSackRecovery() uint64 {
	if x != nil {
		return x.TcpSackRecovery
	}
	return 0
}

func (x *NetstatMetric) GetTcpSackReneging() uint64 {
	if x != nil {
		return x.TcpSackReneging
	}
	return 0
}

func (x *NetstatMetric) GetTcpSackReorder() uint64 {
	if x != nil {
		return x.TcpSackReorder
	}
	return 0
}

func (x *NetstatMetric) GetTcpRenoReorder() uint64 {
	if x != nil {
		return x.TcpRenoReorder
	}
	return 0
}

func (x *NetstatMetric) GetTcpTsReorder() uint64 {
	if x != nil {
		return x.TcpTsReorder
	}
	return 0
}

func (x *NetstatMetric) GetTcpFullUndo() uint64 {
	if x != nil {
		return x.TcpFullUndo
	}
	return 0
}

func (x *NetstatMetric) GetTcpPartialUndo() uint64 {
	if x != nil {
		return x.TcpPartialUndo
	}
	return 0
}

func (x *NetstatMetric) GetTcpDsackUndo() uint64 {
	if x != nil {
		return x.TcpDsackUndo
	}
	return 0
}

func (x *NetstatMetric) GetTcpLossUndo() uint64 {
	if x != nil {
		return x.TcpLossUndo
	}
	return 0
}

func (x *NetstatMetric) GetTcpLostRetransmit() uint64 {
	if x != nil {
		return x.TcpLostRetransmit
	}
	return 0
}

func (x *NetstatMetric) GetTcpRenoFailures() uint64 {
	if x != nil {
		return x.TcpRenoFailures
	}
	return 0
}

func (x *NetstatMetric) GetTcpSackFailures() uint64 {
	if x != nil {
		return x.TcpSackFailures
	}
	return 0
}

func (x *NetstatMetric) GetTcpLossFailures() uint64 {
	if x != nil {
		return x.TcpLossFailures
	}
	return 0
}

func (x *NetstatMetric) GetTcpFastRetrans() uint64 {
	if x != nil {
		return x.TcpFastRetrans
	}
	return 0
}

func (x *NetstatMetric) GetTcpSlowStartRetrans() uint64 {
	if x != nil {
		return x.TcpSlowStartRetrans
	}
	return 0
}

func (x *NetstatMetric) GetTcpTimeouts() uint64 {
	if x != nil {
		return x.TcpTimeouts
	}
	return 0
}

func (x *NetstatMetric) GetTcpLossProbes() uint64 {
	if x != nil {
		return x.TcpLossProbes
	}
	return 0
}

func (x *NetstatMetric) GetTcpLossProbeRecovery() uint64 {
	if x != nil {
		return x.TcpLossProbeRecovery
	}
	return 0
}

func (x *NetstatMetric) GetTcpRenoRecoveryFail() uint64 {
	if x != nil {
		return x.TcpRenoRecoveryFail
	}
	return 0
}

func (x *NetstatMetric) GetTcpSackRecoveryFail() uint64 {
	if x != nil {
		return x.TcpSackRecoveryFail
	}
	return 0
}

func (x *NetstatMetric) GetTcpRcvCollapsed() uint64 {
	if x != nil {
		return x.TcpRcvCollapsed
	}
	return 0
}

func (x *NetstatMetric) GetTcpBacklogCoalesce() uint64 {
	if x != nil {
		return x.TcpBacklogCoalesce
	}
	return 0
}

func (x *NetstatMetric) GetTcpDsackOldSent() uint64 {
	if x != nil {
		return x.TcpDsackOldSent
	}
	return 0
}

func (x *NetstatMetric) GetTcpDsackOfoSent() uint64 {
	if x != nil {
		return x.TcpDsackOfoSent
	}
	return 0
}

func (x *NetstatMetric) GetTcpDsackRecv() uint64 {
	if x != nil {
		return x.TcpDsackRecv
	}
	return 0
}

func (x *NetstatMetric) GetTcpDsackOfoRecv() uint64 {
	if x != nil {
		return x.TcpDsackOfoRecv
	}
	return 0
}

func (x *NetstatMetric) GetTcpAbortOnData() uint64 {
	if x != nil {
		return x.TcpAbortOnData
	}
	return 0
}

func (x *NetstatMetric) GetTcpAbortOnClose() uint64 {
	if x != nil {
		return x.TcpAbortOnClose
	}
	return 0
}

func (x *NetstatMetric) GetTcpAbortOnMemory() uint64 {
	if x != nil {
		return x.TcpAbortOnMemory
	}
	return 0
}

func (x *NetstatMetric) GetTcpAbortOnTimeout() uint64 {
	if x != nil {
		return x.TcpAbortOnTimeout
	}
	return 0
}

func (x *NetstatMetric) GetTcpAbortOnLinger() uint64 {
	if x != nil {
		return x.TcpAbortOnLinger
	}
	return 0
}

func (x *NetstatMetric) GetTcpAbortFailed() uint64 {
	if x != nil {
		return x.TcpAbortFailed
	}
	return 0
}

func (x *NetstatMetric) GetTcpMemoryPressures() uint64 {
	if x != nil {
		return x.TcpMemoryPressures
	}
	return 0
}

func (x *NetstatMetric) GetTcpMemoryPressuresChrono() uint64 {
	if x != nil {
		return x.TcpMemoryPressuresChrono
	}
	return 0
}

func (x *NetstatMetric) GetTcpSackDiscard() uint64 {
	if x != nil {
		return x.TcpSackDiscard
	}
	return 0
}

func (x *NetstatMetric) GetTcpDsackIgnoredOld() uint64 {
	if x != nil {
		return x.TcpDsackIgnoredOld
	}
	return 0
}

func (x *NetstatMetric) GetTcpDsackIgnoredNoUndo() uint64 {
	if x != nil {
		return x.TcpDsackIgnoredNoUndo
	}
	return 0
}

func (x *NetstatMetric) GetTcpSpuriousRtos() uint64 {
	if x != nil {
		return x.TcpSpuriousRtos
	}
	return 0
}

func (x *NetstatMetric) GetTcpMd5NotFound() uint64 {
	if x != nil {
		return x.TcpMd5NotFound
	}
	return 0
}

func (x *NetstatMetric) GetTcpMd5Unexpected() uint64 {
	if x != nil {
		return x.TcpMd5Unexpected
	}
	return 0
}

func (x *NetstatMetric) GetTcpMd5Failure() uint64 {
	if x != nil {
		return x.TcpMd5Failure
	}
	return 0
}

func (x *NetstatMetric) GetTcpSackShifted() uint64 {
	if x != nil {
		return x.TcpSackShifted
	}
	return 0
}

func (x *NetstatMetric) GetTcpSackMerged() uint64 {
	if x != nil {
		return x.TcpSackMerged
	}
	return 0
}

func (x *NetstatMetric) GetTcpSackShiftFallback() uint64 {
	if x != nil {
		return x.TcpSackShiftFallback
	}
	return 0
}

func (x *NetstatMetric) GetTcpBacklogDrop() uint64 {
	if x != nil {
		return x.TcpBacklogDrop
	}
	return 0
}

func (x *NetstatMetric) GetTcpPfMemallocDrop() uint64 {
	if x != nil {
		return x.TcpPfMemallocDrop
	}
	return 0
}

func (x *NetstatMetric) GetTcpMinTtlDrop() uint64 {
	if x != nil {
		return x.TcpMinTtlDrop
	}
	return 0
}

func (x *NetstatMetric) GetTcpDeferAcceptDrop() uint64 {
	if x != nil {
		return x.TcpDeferAcceptDrop
	}
	return 0
}

func (x *NetstatMetric) GetTcpIpReversePathFilter() uint64 {
	if x != nil {
		return x.TcpIpReversePathFilter
	}
	return 0
}

func (x *NetstatMetric) GetTcpTimeWaitOverflow() uint64 {
	if x != nil {
		return x.TcpTimeWaitOverflow
	}
	return 0
}

func (x *NetstatMetric) GetTcpReqQFullDoCookies() uint64 {
	if x != nil {
		return x.TcpReqQFullDoCookies
	}
	return 0
}

func (x *NetstatMetric) GetTcpReqQFullDrop() uint64 {
	if x != nil {
		return x.TcpReqQFullDrop
	}
	return 0
}

func (x *NetstatMetric) GetTcpRetransFail() uint64 {
	if x != nil {
		return x.TcpRetransFail
	}
	return 0
}

func (x *NetstatMetric) GetTcpRcvCoalesce() uint64 {
	if x != nil {
		return x.TcpRcvCoalesce
	}
	return 0
}

func (x *NetstatMetric) GetTcpOfoQueue() uint64 {
	if x != nil {
		return x.TcpOfoQueue
	}
	return 0
}

func (x *NetstatMetric) GetTcpOfoDrop() uint64 {
	if x != nil {
		return x.TcpOfoDrop
	}
	return 0
}

func (x *NetstatMetric) GetTcpOfoMerge() uint64 {
	if x != nil {
		return x.TcpOfoMerge
	}
	return 0
}

func (x *NetstatMetric) GetTcpChallengeAck() uint64 {
	if x != nil {
		return x.TcpChallengeAck
	}
	return 0
}

func (x *NetstatMetric) GetTcpSynChallenge() uint64 {
	if x != nil {
		return x.TcpSynChallenge
	}
	return 0
}

func (x *NetstatMetric) GetTcpFastOpenActive() uint64 {
	if x != nil {
		return x.TcpFastOpenActive
	}
	return 0
}

func (x *NetstatMetric) GetTcpFastOpenActiveFail() uint64 {
	if x != nil {
		return x.TcpFastOpenActiveFail
	}
	return 0
}

func (x *NetstatMetric) GetTcpFastOpenPassive() uint64 {
	if x != nil {
		return x.TcpFastOpenPassive
	}
	return 0
}

func (x *NetstatMetric) GetTcpFastOpenPassiveFail() uint64 {
	if x != nil {
		return x.TcpFastOpenPassiveFail
	}
	return 0
}

func (x *NetstatMetric) GetTcpFastOpenListenOverflow() uint64 {
	if x != nil {
		return x.TcpFastOpenListenOverflow
	}
	return 0
}

func (x *NetstatMetric) GetTcpFastOpenCookieReqd() uint64 {
	if x != nil {
		return x.TcpFastOpenCookieReqd
	}
	return 0
}

func (x *NetstatMetric) GetTcpFastOpenBlackhole() uint64 {
	if x != nil {
		return x.TcpFastOpenBlackhole
	}
	return 0
}

func (x *NetstatMetric) GetTcpSpuriousRtxHostQueues() uint64 {
	if x != nil {
		return x.TcpSpuriousRtxHostQueues
	}
	return 0
}

func (x *NetstatMetric) GetTcpBusyPollRxPackets() uint64 {
	if x != nil {
		return x.TcpBusyPollRxPackets
	}
	return 0
}

func (x *NetstatMetric) GetTcpAutoCorking() uint64 {
	if x != nil {
		return x.TcpAutoCorking
	}
	return 0
}

func (x *NetstatMetric) GetTcpFromZeroWindowAdv() uint64 {
	if x != nil {
		return x.TcpFromZeroWindowAdv
	}
	return 0
}

func (x *NetstatMetric) GetTcpToZeroWindowAdv() uint64 {
	if x != nil {
		return x.TcpToZeroWindowAdv
	}
	return 0
}

func (x *NetstatMetric) GetTcpWantZeroWindowAdv() uint64 {
	if x != nil {
		return x.TcpWantZeroWindowAdv
	}
	return 0
}

func (x *NetstatMetric) GetTcpSynRetrans() uint64 {
	if x != nil {
		return x.TcpSynRetrans
	}
	return 0
}

func (x *NetstatMetric) GetTcpOrigDataSent() uint64 {
	if x != nil {
		return x.TcpOrigDataSent
	}
	return 0
}

func (x *NetstatMetric) GetTcpHystartTrainDetect() uint64 {
	if x != nil {
		return x.TcpHystartTrainDetect
	}
	return 0
}

func (x *NetstatMetric) GetTcpHystartTrainCwnd() uint64 {
	if x != nil {
		return x.TcpHystartTrainCwnd
	}
	return 0
}

func (x *NetstatMetric) GetTcpHystartDelayDetect() uint64 {
	if x != nil {
		return x.TcpHystartDelayDetect
	}
	return 0
}

func (x *NetstatMetric) GetTcpHystartDelayCwnd() uint64 {
	if x != nil {
		return x.TcpHystartDelayCwnd
	}
	return 0
}

func (x *NetstatMetric) GetTcpAckSkippedSynRecv() uint64 {
	if x != nil {
		return x.TcpAckSkippedSynRecv
	}
	return 0
}

func (x *NetstatMetric) GetTcpAckSkippedPaws() uint64 {
	if x != nil {
		return x.TcpAckSkippedPaws
	}
	return 0
}

func (x *NetstatMetric) GetTcpAckSkippedSeq() uint64 {
	if x != nil {
		return x.TcpAckSkippedSeq
	}
	return 0
}

func (x *NetstatMetric) GetTcpAckSkippedFinWait2() uint64 {
	if x != nil {
		return x.TcpAckSkippedFinWait2
	}
	return 0
}

func (x *NetstatMetric) GetTcpAckSkippedTimeWait() uint64 {
	if x != nil {
		return x.TcpAckSkippedTimeWait
	}
	return 0
}

func (x *NetstatMetric) GetTcpAckSkippedChallenge() uint64 {
	if x != nil {
		return x.TcpAckSkippedChallenge
	}
	return 0
}

func (x *NetstatMetric) GetTcpWinProbe() uint64 {
	if x != nil {
		return x.TcpWinProbe
	}
	return 0
}

func (x *NetstatMetric) GetTcpKeepAlive() uint64 {
	if x != nil {
		return x.TcpKeepAlive
	}
	return 0
}

func (x *NetstatMetric) GetTcpMtupFail() uint64 {
	if x != nil {
		return x.TcpMtupFail
	}
	return 0
}

func (x *NetstatMetric) GetTcpMtupSuccess() uint64 {
	if x != nil {
		return x.TcpMtupSuccess
	}
	return 0
}

func (x *NetstatMetric) GetTcpDelivered() uint64 {
	if x != nil {
		return x.TcpDelivered
	}
	return 0
}

func (x *NetstatMetric) GetTcpDeliveredCe() uint64 {
	if x != nil {
		return x.TcpDeliveredCe
	}
	return 0
}

func (x *NetstatMetric) GetTcpAckCompressed() uint64 {
	if x != nil {
		return x.TcpAckCompressed
	}
	return 0
}

func (x *NetstatMetric) GetTcpZeroWindowDrop() uint64 {
	if x != nil {
		return x.TcpZeroWindowDrop
	}
	return 0
}

func (x *NetstatMetric) GetTcpRcvQDrop() uint64 {
	if x != nil {
		return x.TcpRcvQDrop
	}
	return 0
}

func (x *NetstatMetric) GetTcpWqueueTooBig() uint64 {
	if x != nil {
		return x.TcpWqueueTooBig
	}
	return 0
}

func (x *NetstatMetric) GetTcpFastOpenPassiveAltKey() uint64 {
	if x != nil {
		return x.TcpFastOpenPassiveAltKey
	}
	return 0
}

func (x *NetstatMetric) GetTcpTimeoutRehash() uint64 {
	if x != nil {
		return x.TcpTimeoutRehash
	}
	return 0
}

func (x *NetstatMetric) GetTcpDuplicateDataRehash() uint64 {
	if x != nil {
		return x.TcpDuplicateDataRehash
	}
	return 0
}

func (x *NetstatMetric) GetTcpDsackRecvSegs() uint64 {
	if x != nil {
		return x.TcpDsackRecvSegs
	}
	return 0
}

func (x *NetstatMetric) GetTcpDsackIgnoredDubious() uint64 {
	if x != nil {
		return x.TcpDsackIgnoredDubious
	}
	return 0
}

func (x *NetstatMetric) GetTcpMigrateReqSuccess() uint64 {
	if x != nil {
		return x.TcpMigrateReqSuccess
	}
	return 0
}

func (x *NetstatMetric) GetTcpMigrateReqFailure() uint64 {
	if x != nil {
		return x.TcpMigrateReqFailure
	}
	return 0
}

func (x *NetstatMetric) GetTcpPlbRehash() uint64 {
	if x != nil {
		return x.TcpPlbRehash
	}
	return 0
}

func (x *NetstatMetric) GetIcmpInMsgs() uint64 {
	if x != nil {
		return x.IcmpInMsgs
	}
	return 0
}

func (x *NetstatMetric) GetIcmpInErrors() uint64 {
	if x != nil {
		return x.IcmpInErrors
	}
	return 0
}

func (x *NetstatMetric) GetIcmpInCsumErrors() uint64 {
	if x != nil {
		return x.IcmpInCsumErrors
	}
	return 0
}

func (x *NetstatMetric) GetIcmpInDestUnreachs() uint64 {
	if x != nil {
		return x.IcmpInDestUnreachs
	}
	return 0
}

func (x *NetstatMetric) GetIcmpInTimeExcds() uint64 {
	if x != nil {
		return x.IcmpInTimeExcds
	}
	return 0
}

func (x *NetstatMetric) GetIcmpInParmProbs() uint64 {
	if x != nil {
		return x.IcmpInParmProbs
	}
	return 0
}

func (x *NetstatMetric) GetIcmpInSrcQuenchs() uint64 {
	if x != nil {
		return x.IcmpInSrcQuenchs
	}
	return 0
}

func (x *NetstatMetric) GetIcmpInRedirects() uint64 {
	if x != nil {
		return x.IcmpInRedirects
	}
	return 0
}

func (x *NetstatMetric) GetIcmpInEchos() uint64 {
	if x != nil {
		return x.IcmpInEchos
	}
	return 0
}

func (x *NetstatMetric) GetIcmpInEchoReps() uint64 {
	if x != nil {
		return x.IcmpInEchoReps
	}
	return 0
}

func (x *NetstatMetric) GetIcmpInTimestamps() uint64 {
	if x != nil {
		return x.IcmpInTimestamps
	}
	return 0
}

func (x *NetstatMetric) GetIcmpInTimestampReps() uint64 {
	if x != nil {
		return x.IcmpInTimestampReps
	}
	return 0
}

func (x *NetstatMetric) GetIcmpInAddrMasks() uint64 {
	if x != nil {
		return x.IcmpInAddrMasks
	}
	return 0
}

func (x *NetstatMetric) GetIcmpInAddrMaskReps() uint64 {
	if x != nil {
		return x.IcmpInAddrMaskReps
	}
	return 0
}

func (x *NetstatMetric) GetIcmpOutMsgs() uint64 {
	if x != nil {
		return x.IcmpOutMsgs
	}
	return 0
}

func (x *NetstatMetric) GetIcmpOutErrors() uint64 {
	if x != nil {
		return x.IcmpOutErrors
	}
	return 0
}

func (x *NetstatMetric) GetIcmpOutRateLimitGlobal() uint64 {
	if x != nil {
		return x.IcmpOutRateLimitGlobal
	}
	return 0
}

func (x *NetstatMetric) GetIcmpOutRateLimitHost() uint64 {
	if x != nil {
		return x.IcmpOutRateLimitHost
	}
	return 0
}

func (x *NetstatMetric) GetIcmpOutDestUnreachs() uint64 {
	if x != nil {
		return x.IcmpOutDestUnreachs
	}
	return 0
}

func (x *NetstatMetric) GetIcmpOutTimeExcds() uint64 {
	if x != nil {
		return x.IcmpOutTimeExcds
	}
	return 0
}

func (x *NetstatMetric) GetIcmpOutParmProbs() uint64 {
	if x != nil {
		return x.IcmpOutParmProbs
	}
	return 0
}

func (x *NetstatMetric) GetIcmpOutSrcQuenchs() uint64 {
	if x != nil {
		return x.IcmpOutSrcQuenchs
	}
	return 0
}

func (x *NetstatMetric) GetIcmpOutRedirects() uint64 {
	if x != nil {
		return x.IcmpOutRedirects
	}
	return 0
}

func (x *NetstatMetric) GetIcmpOutEchos() uint64 {
	if x != nil {
		return x.IcmpOutEchos
	}
	return 0
}

func (x *NetstatMetric) GetIcmpOutEchoReps() uint64 {
	if x != nil {
		return x.IcmpOutEchoReps
	}
	return 0
}

func (x *NetstatMetric) GetIcmpOutTimestamps() uint64 {
	if x != nil {
		return x.IcmpOutTimestamps
	}
	return 0
}

func (x *NetstatMetric) GetIcmpOutTimestampReps() uint64 {
	if x != nil {
		return x.IcmpOutTimestampReps
	}
	return 0
}

func (x *NetstatMetric) GetIcmpOutAddrMasks() uint64 {
	if x != nil {
		return x.IcmpOutAddrMasks
	}
	return 0
}

func (x *NetstatMetric) GetIcmpOutAddrMaskReps() uint64 {
	if x != nil {
		return x.IcmpOutAddrMaskReps
	}
	return 0
}

var File_proto_tcpmon_proto protoreflect.FileDescriptor

var file_proto_tcpmon_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x63, 0x70, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x74, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1e,
	0x0a, 0x03, 0x74, 0x63, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x63,
	0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x48, 0x00, 0x52, 0x03, 0x74, 0x63, 0x70, 0x12, 0x1e,
	0x0a, 0x03, 0x6e, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4e, 0x69,
	0x63, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x48, 0x00, 0x52, 0x03, 0x6e, 0x69, 0x63, 0x12, 0x22,
	0x0a, 0x03, 0x6e, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4e, 0x65,
	0x74, 0x73, 0x74, 0x61, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x48, 0x00, 0x52, 0x03, 0x6e,
	0x65, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x92, 0x02, 0x0a, 0x11, 0x53,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6d, 0x65, 0x6d, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x6d, 0x65, 0x6d, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x63, 0x76, 0x5f, 0x62, 0x75, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x72, 0x63, 0x76, 0x42, 0x75, 0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x6d, 0x65, 0x6d,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x77, 0x6d,
	0x65, 0x6d, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6e, 0x64, 0x5f, 0x62,
	0x75, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6e, 0x64, 0x42, 0x75, 0x66,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x77, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x77, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x12, 0x1f, 0x0a,
	0x0b, 0x77, 0x6d, 0x65, 0x6d, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x77, 0x6d, 0x65, 0x6d, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x6f, 0x70, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x6f, 0x70, 0x74, 0x4d, 0x65, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x6c, 0x6f, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x4c,
	0x6f, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x6f, 0x63, 0x6b, 0x44, 0x72, 0x6f, 0x70, 0x22,
	0x5f, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x22, 0x43, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x66, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x66, 0x64, 0x22, 0xed, 0x0a, 0x0a, 0x0c, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x22, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65,
	0x63, 0x76, 0x5f, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x65, 0x63, 0x76,
	0x51, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x73, 0x65, 0x6e, 0x64, 0x51, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x12, 0x2a, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x22, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x74, 0x69,
	0x6d, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x6b, 0x6d, 0x65, 0x6d, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x73, 0x6b, 0x6d, 0x65, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x74, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x61, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x61,
	0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x75, 0x62, 0x69, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x63, 0x75, 0x62, 0x69, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61,
	0x70, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x63,
	0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x73,
	0x65, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6e, 0x64, 0x5f, 0x77, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x6e, 0x64, 0x57, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x63, 0x76, 0x5f, 0x77, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x63, 0x76, 0x57, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x74, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x72, 0x74, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x74, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x72, 0x74, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x74, 0x74, 0x76, 0x61, 0x72, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x74, 0x74, 0x76, 0x61, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x69, 0x6e, 0x72, 0x74, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6d,
	0x69, 0x6e, 0x72, 0x74, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x63, 0x76, 0x5f, 0x72, 0x74, 0x74,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x63, 0x76, 0x52, 0x74, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x6e, 0x6f, 0x77, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x4e, 0x6f, 0x77, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x74, 0x6f, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x61, 0x74, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x73, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6d, 0x74, 0x75,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6d, 0x74, 0x75, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x63, 0x76, 0x6d, 0x73, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x63,
	0x76, 0x6d, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x64, 0x76, 0x6d, 0x73, 0x73, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x64, 0x76, 0x6d, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x77, 0x6e, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x77, 0x6e, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x6e, 0x64, 0x5f, 0x77, 0x6e, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x73, 0x6e, 0x64, 0x57, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x41, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x73, 0x65, 0x67, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x65, 0x67, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65,
	0x67, 0x73, 0x49, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x73, 0x6e, 0x64, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x73, 0x6e, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x72, 0x63, 0x76, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6c, 0x61, 0x73, 0x74, 0x72, 0x63, 0x76, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x62, 0x75, 0x73, 0x79, 0x5f, 0x6d, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x62, 0x75, 0x73, 0x79, 0x4d, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x63, 0x76,
	0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x63,
	0x76, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x63, 0x76, 0x5f, 0x73, 0x73,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x63,
	0x76, 0x53, 0x73, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x65, 0x67, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x67, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x20, 0x0a,
	0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x67, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x67, 0x73, 0x49, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x77, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x77, 0x6e, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6e, 0x64, 0x62, 0x75, 0x66, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x6e, 0x64, 0x62,
	0x75, 0x66, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x63, 0x6e,
	0x18, 0x35, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x65, 0x63, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x63, 0x6e, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x63,
	0x6e, 0x73, 0x65, 0x65, 0x6e, 0x22, 0x73, 0x0a, 0x09, 0x54, 0x63, 0x70, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x1f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b,
	0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x27, 0x0a, 0x07, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x52, 0x07, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x22, 0xba, 0x02, 0x0a, 0x0b, 0x49,
	0x66, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x72, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x78, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x72, 0x78, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x78,
	0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x72, 0x78, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x78, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x72,
	0x78, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x78, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x78, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x78, 0x44, 0x72, 0x6f, 0x70, 0x70,
	0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x78, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x78, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x75, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x78, 0x43, 0x61, 0x72, 0x72, 0x69,
	0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x78, 0x43, 0x6f, 0x6c,
	0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x70, 0x0a, 0x09, 0x4e, 0x69, 0x63, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0b, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x49, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x52, 0x06, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x22, 0xc8, 0x4d, 0x0a, 0x0d, 0x4e, 0x65,
	0x74, 0x73, 0x74, 0x61, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x70,
	0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x69, 0x70, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x24, 0x0a, 0x0e, 0x69, 0x70, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x74,
	0x6c, 0x18, 0x65, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x69, 0x70, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x54, 0x74, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x18, 0x66, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x69,
	0x70, 0x49, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x10, 0x69,
	0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x68, 0x64, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x67, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x69, 0x70, 0x49, 0x6e, 0x48, 0x64, 0x72, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x11, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x68, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x69, 0x70, 0x49, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x69, 0x70, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x67,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x69, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x69, 0x70, 0x46, 0x6f,
	0x72, 0x77, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x69,
	0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x69, 0x70, 0x49, 0x6e, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x12, 0x24, 0x0a, 0x0e,
	0x69, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x6b,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x69, 0x70, 0x49, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x69, 0x70, 0x49, 0x6e,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x70, 0x5f, 0x6f,
	0x75, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x6d, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x69, 0x70, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x69, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x69, 0x70, 0x4f, 0x75, 0x74,
	0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x10, 0x69, 0x70, 0x5f, 0x6f,
	0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x6f, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x69, 0x70, 0x4f, 0x75, 0x74, 0x4e, 0x6f, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6d, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x70, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x69, 0x70, 0x52,
	0x65, 0x61, 0x73, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x69,
	0x70, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6d, 0x5f, 0x72, 0x65, 0x71, 0x64, 0x73, 0x18, 0x71, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x69, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6d, 0x52, 0x65, 0x71, 0x64,
	0x73, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6d, 0x5f, 0x6f, 0x6b,
	0x73, 0x18, 0x72, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x69, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6d,
	0x4f, 0x6b, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6d, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x73, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x69, 0x70, 0x52,
	0x65, 0x61, 0x73, 0x6d, 0x46, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x70, 0x5f,
	0x66, 0x72, 0x61, 0x67, 0x5f, 0x6f, 0x6b, 0x73, 0x18, 0x74, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x69, 0x70, 0x46, 0x72, 0x61, 0x67, 0x4f, 0x6b, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x70, 0x5f,
	0x66, 0x72, 0x61, 0x67, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x75, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x69, 0x70, 0x46, 0x72, 0x61, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x69, 0x70, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x76, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x69, 0x70, 0x46, 0x72, 0x61, 0x67, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x6e,
	0x6f, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0xd8, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x69, 0x70, 0x49, 0x6e, 0x4e, 0x6f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a,
	0x14, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xd9, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x69, 0x70,
	0x49, 0x6e, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70,
	0x6b, 0x74, 0x73, 0x18, 0xda, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x69, 0x70, 0x49, 0x6e,
	0x4d, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x70, 0x5f,
	0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xdb,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x69, 0x70, 0x4f, 0x75, 0x74, 0x4d, 0x63, 0x61, 0x73,
	0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x62,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xdc, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x69, 0x70, 0x49, 0x6e, 0x42, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x69, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x70, 0x6b, 0x74, 0x73, 0x18, 0xdd, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x69, 0x70, 0x4f,
	0x75, 0x74, 0x42, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0xde, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x69, 0x70, 0x49, 0x6e, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18,
	0xdf, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x69, 0x70, 0x4f, 0x75, 0x74, 0x4f, 0x63, 0x74,
	0x65, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0xe0, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x69, 0x70, 0x49, 0x6e, 0x4d, 0x63, 0x61, 0x73, 0x74, 0x4f, 0x63, 0x74, 0x65, 0x74,
	0x73, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0xe1, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x69, 0x70, 0x4f, 0x75, 0x74, 0x4d, 0x63, 0x61, 0x73, 0x74, 0x4f, 0x63, 0x74, 0x65, 0x74,
	0x73, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0xe2, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x69, 0x70, 0x49, 0x6e, 0x42, 0x63, 0x61, 0x73, 0x74, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x69, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0xe3, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x69,
	0x70, 0x4f, 0x75, 0x74, 0x42, 0x63, 0x61, 0x73, 0x74, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x73, 0x75, 0x6d, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0xe4, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x69, 0x70, 0x49,
	0x6e, 0x43, 0x73, 0x75, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x11, 0x69,
	0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x5f, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73,
	0x18, 0xe5, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x69, 0x70, 0x49, 0x6e, 0x4e, 0x6f, 0x45,
	0x63, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x5f,
	0x65, 0x63, 0x74, 0x31, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xe6, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x69, 0x70, 0x49, 0x6e, 0x45, 0x63, 0x74, 0x31, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x65, 0x63, 0x74, 0x30, 0x5f, 0x70, 0x6b, 0x74,
	0x73, 0x18, 0xe7, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x69, 0x70, 0x49, 0x6e, 0x45, 0x63,
	0x74, 0x30, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x5f,
	0x63, 0x65, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0xe8, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x69, 0x70, 0x49, 0x6e, 0x43, 0x65, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x70,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6d, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x73, 0x18,
	0xe9, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x69, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6d, 0x4f,
	0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x64, 0x70, 0x5f, 0x69,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0xc8, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x75, 0x64, 0x70, 0x49, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x64, 0x70, 0x5f, 0x6e, 0x6f, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x64, 0x70, 0x4e, 0x6f,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x64, 0x70, 0x5f, 0x69, 0x6e, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xca, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75,
	0x64, 0x70, 0x49, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x75, 0x64,
	0x70, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0xcb, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x75, 0x64, 0x70, 0x4f, 0x75, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x75, 0x64, 0x70, 0x5f, 0x72,
	0x63, 0x76, 0x62, 0x75, 0x66, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xcc, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x75, 0x64, 0x70, 0x52, 0x63, 0x76, 0x62, 0x75, 0x66, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x75, 0x64, 0x70, 0x5f, 0x73, 0x6e, 0x64, 0x62,
	0x75, 0x66, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x75, 0x64, 0x70, 0x53, 0x6e, 0x64, 0x62, 0x75, 0x66, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x64, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x73, 0x75, 0x6d,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xce, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x75, 0x64, 0x70, 0x49, 0x6e, 0x43, 0x73, 0x75, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0x2b, 0x0a, 0x11, 0x75, 0x64, 0x70, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x18, 0xcf, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x75, 0x64, 0x70,
	0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x12, 0x25, 0x0a, 0x0e,
	0x75, 0x64, 0x70, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xd0,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x75, 0x64, 0x70, 0x4d, 0x65, 0x6d, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x63, 0x70, 0x5f, 0x72, 0x74, 0x6f, 0x5f, 0x61,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x74, 0x63, 0x70, 0x52, 0x74, 0x6f, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x63, 0x70, 0x5f, 0x72, 0x74, 0x6f, 0x5f, 0x6d, 0x69, 0x6e, 0x18,
	0xad, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x63, 0x70, 0x52, 0x74, 0x6f, 0x4d, 0x69,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x63, 0x70, 0x5f, 0x72, 0x74, 0x6f, 0x5f, 0x6d, 0x61, 0x78,
	0x18, 0xae, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x63, 0x70, 0x52, 0x74, 0x6f, 0x4d,
	0x61, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x63, 0x70, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x18, 0xaf, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x63, 0x70, 0x4d, 0x61,
	0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x63, 0x70, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x18, 0xb0, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x74, 0x63, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x74, 0x63, 0x70, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x18, 0xb1, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x63,
	0x70, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x73, 0x12, 0x2b, 0x0a,
	0x11, 0x74, 0x63, 0x70, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0xb2, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x63, 0x70, 0x41, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x63,
	0x70, 0x5f, 0x65, 0x73, 0x74, 0x61, 0x62, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x18, 0xb3,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x63, 0x70, 0x45, 0x73, 0x74, 0x61, 0x62, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x63, 0x70, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x5f, 0x65, 0x73, 0x74, 0x61, 0x62, 0x18, 0xb4, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x74, 0x63, 0x70, 0x43, 0x75, 0x72, 0x72, 0x45, 0x73, 0x74, 0x61, 0x62, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x67, 0x73, 0x18, 0xb5, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x53, 0x65, 0x67, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x63, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x67, 0x73, 0x18, 0xb6, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x63, 0x70, 0x4f, 0x75, 0x74, 0x53, 0x65, 0x67, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x74, 0x63, 0x70, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f,
	0x73, 0x65, 0x67, 0x73, 0x18, 0xb7, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x63, 0x70,
	0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x53, 0x65, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x63, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x73, 0x18, 0xb8, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x45, 0x72, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x63, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x73, 0x74, 0x73, 0x18, 0xb9, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x63, 0x70, 0x4f, 0x75, 0x74, 0x52, 0x73, 0x74, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x73, 0x75, 0x6d, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xba, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x63,
	0x70, 0x49, 0x6e, 0x43, 0x73, 0x75, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x2f, 0x0a,
	0x13, 0x74, 0x63, 0x70, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x6e, 0x74, 0x18, 0x90, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x74, 0x63, 0x70,
	0x53, 0x79, 0x6e, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x2f,
	0x0a, 0x13, 0x74, 0x63, 0x70, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73,
	0x5f, 0x72, 0x65, 0x63, 0x76, 0x18, 0x91, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x74, 0x63,
	0x70, 0x53, 0x79, 0x6e, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x52, 0x65, 0x63, 0x76, 0x12,
	0x33, 0x0a, 0x15, 0x74, 0x63, 0x70, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x73, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x92, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x13, 0x74, 0x63, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x63, 0x70, 0x5f, 0x65, 0x6d, 0x62, 0x72,
	0x79, 0x6f, 0x6e, 0x69, 0x63, 0x5f, 0x72, 0x73, 0x74, 0x73, 0x18, 0x93, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x74, 0x63, 0x70, 0x45, 0x6d, 0x62, 0x72, 0x79, 0x6f, 0x6e, 0x69, 0x63, 0x52,
	0x73, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x63, 0x70, 0x5f, 0x70, 0x72, 0x75, 0x6e, 0x65,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x94, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x74, 0x63, 0x70, 0x50, 0x72, 0x75, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x74, 0x63, 0x70, 0x5f, 0x72, 0x63, 0x76, 0x5f, 0x70, 0x72, 0x75, 0x6e, 0x65, 0x64,
	0x18, 0x95, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x63, 0x70, 0x52, 0x63, 0x76, 0x50,
	0x72, 0x75, 0x6e, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x63, 0x70, 0x5f, 0x6f, 0x66, 0x6f,
	0x5f, 0x70, 0x72, 0x75, 0x6e, 0x65, 0x64, 0x18, 0x96, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x74, 0x63, 0x70, 0x4f, 0x66, 0x6f, 0x50, 0x72, 0x75, 0x6e, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x17,
	0x74, 0x63, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x5f, 0x69, 0x63, 0x6d, 0x70, 0x73, 0x18, 0x97, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13,
	0x74, 0x63, 0x70, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x49, 0x63,
	0x6d, 0x70, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x63, 0x70, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x69, 0x63, 0x6d, 0x70, 0x73, 0x18, 0x98, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x74, 0x63, 0x70, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x72, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x49, 0x63, 0x6d, 0x70, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x63, 0x70,
	0x5f, 0x61, 0x72, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x99, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x74, 0x63, 0x70, 0x41, 0x72, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x63, 0x70, 0x5f, 0x74, 0x77, 0x18, 0x9a, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x74, 0x63, 0x70, 0x54, 0x77, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x63, 0x70, 0x5f,
	0x74, 0x77, 0x5f, 0x72, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x64, 0x18, 0x9b, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x74, 0x63, 0x70, 0x54, 0x77, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x63, 0x70, 0x5f, 0x74, 0x77, 0x5f, 0x6b, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x18, 0x9c, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x63, 0x70, 0x54, 0x77,
	0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x63, 0x70, 0x5f, 0x70, 0x61,
	0x77, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x9d, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x74, 0x63, 0x70, 0x50, 0x61, 0x77, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x74, 0x63, 0x70, 0x5f, 0x70, 0x61, 0x77, 0x73, 0x5f, 0x65, 0x73, 0x74, 0x61,
	0x62, 0x18, 0x9e, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x63, 0x70, 0x50, 0x61, 0x77,
	0x73, 0x45, 0x73, 0x74, 0x61, 0x62, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x63, 0x70, 0x5f, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x9f, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x74, 0x63, 0x70, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x41, 0x63, 0x6b,
	0x73, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x63, 0x70, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0xa0, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x13, 0x74, 0x63, 0x70, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x41, 0x63,
	0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x63, 0x70, 0x5f, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x6f, 0x73, 0x74, 0x18,
	0xa1, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x74, 0x63, 0x70, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x65, 0x64, 0x41, 0x63, 0x6b, 0x4c, 0x6f, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x14, 0x74, 0x63, 0x70,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x18, 0xa2, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x74, 0x63, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x29, 0x0a, 0x10,
	0x74, 0x63, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x73,
	0x18, 0xa3, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x63, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x63, 0x70, 0x5f, 0x68,
	0x70, 0x5f, 0x68, 0x69, 0x74, 0x73, 0x18, 0xa4, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74,
	0x63, 0x70, 0x48, 0x70, 0x48, 0x69, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x63, 0x70, 0x5f,
	0x70, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x63, 0x6b, 0x73, 0x18, 0xa5, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x74, 0x63, 0x70, 0x50, 0x75, 0x72, 0x65, 0x41, 0x63, 0x6b, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x63, 0x70, 0x5f, 0x68, 0x70, 0x5f, 0x61, 0x63, 0x6b, 0x73, 0x18, 0xa6, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x63, 0x70, 0x48, 0x70, 0x41, 0x63, 0x6b, 0x73, 0x12, 0x2b,
	0x0a, 0x11, 0x74, 0x63, 0x70, 0x5f, 0x72, 0x65, 0x6e, 0x6f, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x18, 0xa7, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x63, 0x70, 0x52,
	0x65, 0x6e, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x74,
	0x63, 0x70, 0x5f, 0x73, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x18, 0xa8, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x63, 0x70, 0x53, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x63, 0x70, 0x5f,
	0x73, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x6e, 0x65, 0x67, 0x69, 0x6e, 0x67, 0x18, 0xa9, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x63, 0x70, 0x53, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x6e,
	0x65, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x63, 0x70, 0x5f, 0x73, 0x61, 0x63,
	0x6b, 0x5f, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0xaa, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x74, 0x63, 0x70, 0x53, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x29, 0x0a, 0x10, 0x74, 0x63, 0x70, 0x5f, 0x72, 0x65, 0x6e, 0x6f, 0x5f, 0x72, 0x65, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0xab, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x63, 0x70,
	0x52, 0x65, 0x6e, 0x6f, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x74,
	0x63, 0x70, 0x5f, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0xac, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x63, 0x70, 0x54, 0x73, 0x52, 0x65, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x63, 0x70, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x75,
	0x6e, 0x64, 0x6f, 0x18, 0xad, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x63, 0x70, 0x46,
	0x75, 0x6c, 0x6c, 0x55, 0x6e, 0x64, 0x6f, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x63, 0x70, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x64, 0x6f, 0x18, 0xae, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x74, 0x63, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x6e,
	0x64, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x63, 0x70, 0x5f, 0x64, 0x73, 0x61, 0x63, 0x6b, 0x5f,
	0x75, 0x6e, 0x64, 0x6f, 0x18, 0xaf, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x63, 0x70,
	0x44, 0x73, 0x61, 0x63, 0x6b, 0x55, 0x6e, 0x64, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x63, 0x70,
	0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x64, 0x6f, 0x18, 0xb0, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x74, 0x63, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x55, 0x6e, 0x64, 0x6f, 0x12, 0x2f,
	0x0a, 0x13, 0x74, 0x63, 0x70, 0x5f, 0x6c, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x74, 0x18, 0xb1, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x74, 0x63,
	0x70, 0x4c, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x12,
	0x2b, 0x0a, 0x11, 0x74, 0x63, 0x70, 0x5f, 0x72, 0x65, 0x6e, 0x6f, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x73, 0x18, 0xb2, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x63, 0x70,
	0x52, 0x65, 0x6e, 0x6f, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11,
	0x74, 0x63, 0x70, 0x5f, 0x73, 0x61, 0x63, 0x6b, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x73, 0x18, 0xb3, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x63, 0x70, 0x53, 0x61, 0x63,
	0x6b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x63, 0x70,
	0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0xb4,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x63, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x63, 0x70, 0x5f, 0x66, 0x61,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x18, 0xb5, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x74, 0x63, 0x70, 0x46, 0x61, 0x73, 0x74, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x63, 0x70, 0x5f, 0x73, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x18, 0xb6, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x13, 0x74, 0x63, 0x70, 0x53, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x63, 0x70, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x18, 0xb7, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x74, 0x63, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74,
	0x63, 0x70, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x18, 0xb8,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x63, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x50, 0x72,
	0x6f, 0x62, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x63, 0x70, 0x5f, 0x6c, 0x6f, 0x73, 0x73,
	0x5f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x18,
	0xb9, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x74, 0x63, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x50,
	0x72, 0x6f, 0x62, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x16,
	0x74, 0x63, 0x70, 0x5f, 0x72, 0x65, 0x6e, 0x6f, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x18, 0xba, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x74,
	0x63, 0x70, 0x52, 0x65, 0x6e, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x46, 0x61,
	0x69, 0x6c, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x63, 0x70, 0x5f, 0x73, 0x61, 0x63, 0x6b, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x18, 0xbb, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x13, 0x74, 0x63, 0x70, 0x53, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x46, 0x61, 0x69, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x63, 0x70, 0x5f,
	0x72, 0x63, 0x76, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x18, 0xbc, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x63, 0x70, 0x52, 0x63, 0x76, 0x43, 0x6f, 0x6c, 0x6c,
	0x61, 0x70, 0x73, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x14, 0x74, 0x63, 0x70, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x65, 0x18, 0xbd, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x74, 0x63, 0x70, 0x42, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67,
	0x43, 0x6f, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x63, 0x70, 0x5f,
	0x64, 0x73, 0x61, 0x63, 0x6b, 0x5f, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0xbe,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x63, 0x70, 0x44, 0x73, 0x61, 0x63, 0x6b, 0x4f,
	0x6c, 0x64, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x63, 0x70, 0x5f, 0x64, 0x73,
	0x61, 0x63, 0x6b, 0x5f, 0x6f, 0x66, 0x6f, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0xbf, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x63, 0x70, 0x44, 0x73, 0x61, 0x63, 0x6b, 0x4f, 0x66, 0x6f,
	0x53, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x63, 0x70, 0x5f, 0x64, 0x73, 0x61, 0x63,
	0x6b, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x18, 0xc0, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74,
	0x63, 0x70, 0x44, 0x73, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x76, 0x12, 0x2c, 0x0a, 0x12, 0x74,
	0x63, 0x70, 0x5f, 0x64, 0x73, 0x61, 0x63, 0x6b, 0x5f, 0x6f, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x63,
	0x76, 0x18, 0xc1, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x63, 0x70, 0x44, 0x73, 0x61,
	0x63, 0x6b, 0x4f, 0x66, 0x6f, 0x52, 0x65, 0x63, 0x76, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x63, 0x70,
	0x5f, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0xc2,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x63, 0x70, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x4f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x63, 0x70, 0x5f, 0x61, 0x62, 0x6f,
	0x72, 0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0xc3, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x74, 0x63, 0x70, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x4f, 0x6e, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x63, 0x70, 0x5f, 0x61, 0x62, 0x6f, 0x72, 0x74,
	0x5f, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0xc4, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x74, 0x63, 0x70, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x4f, 0x6e, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x63, 0x70, 0x5f, 0x61, 0x62, 0x6f, 0x72, 0x74,
	0x5f, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0xc5, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x11, 0x74, 0x63, 0x70, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x4f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x63, 0x70, 0x5f, 0x61, 0x62, 0x6f,
	0x72, 0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x18, 0xc6, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x63, 0x70, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x4f, 0x6e, 0x4c,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x63, 0x70, 0x5f, 0x61, 0x62, 0x6f,
	0x72, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0xc7, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x74, 0x63, 0x70, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x12, 0x31, 0x0a, 0x14, 0x74, 0x63, 0x70, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x73, 0x18, 0xc8, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x12, 0x74, 0x63, 0x70, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75,
	0x72, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x74, 0x63, 0x70, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x63, 0x68, 0x72, 0x6f,
	0x6e, 0x6f, 0x18, 0xc9, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x74, 0x63, 0x70, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x73, 0x43, 0x68, 0x72,
	0x6f, 0x6e, 0x6f, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x63, 0x70, 0x5f, 0x73, 0x61, 0x63, 0x6b, 0x5f,
	0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x18, 0xca, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x74, 0x63, 0x70, 0x53, 0x61, 0x63, 0x6b, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x12, 0x32,
	0x0a, 0x15, 0x74, 0x63, 0x70, 0x5f, 0x64, 0x73, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x64, 0x5f, 0x6f, 0x6c, 0x64, 0x18, 0xcb, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12,
	0x74, 0x63, 0x70, 0x44, 0x73, 0x61, 0x63, 0x6b, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x4f,
	0x6c, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x74, 0x63, 0x70, 0x5f, 0x64, 0x73, 0x61, 0x63, 0x6b, 0x5f,
	0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x5f, 0x75, 0x6e, 0x64, 0x6f, 0x18,
	0xcc, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x74, 0x63, 0x70, 0x44, 0x73, 0x61, 0x63, 0x6b,
	0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x4e, 0x6f, 0x55, 0x6e, 0x64, 0x6f, 0x12, 0x2b, 0x0a,
	0x11, 0x74, 0x63, 0x70, 0x5f, 0x73, 0x70, 0x75, 0x72, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x72, 0x74,
	0x6f, 0x73, 0x18, 0xcd, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x63, 0x70, 0x53, 0x70,
	0x75, 0x72, 0x69, 0x6f, 0x75, 0x73, 0x52, 0x74, 0x6f, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x63,
	0x70, 0x5f, 0x6d, 0x64, 0x35, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0xce, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x63, 0x70, 0x4d, 0x64, 0x35, 0x4e, 0x6f,
	0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x63, 0x70, 0x5f, 0x6d, 0x64,
	0x35, 0x5f, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0xcf, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x63, 0x70, 0x4d, 0x64, 0x35, 0x55, 0x6e, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x63, 0x70, 0x5f, 0x6d, 0x64, 0x35,
	0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0xd0, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x74, 0x63, 0x70, 0x4d, 0x64, 0x35, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x74, 0x63, 0x70, 0x5f, 0x73, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x65, 0x64, 0x18, 0xd1, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x63, 0x70, 0x53, 0x61,
	0x63, 0x6b, 0x53, 0x68, 0x69, 0x66, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x63, 0x70,
	0x5f, 0x73, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x18, 0xd2, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x63, 0x70, 0x53, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x63, 0x70, 0x5f, 0x73, 0x61, 0x63, 0x6b, 0x5f, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0xd3, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x74, 0x63, 0x70, 0x53, 0x61, 0x63, 0x6b, 0x53, 0x68, 0x69,
	0x66, 0x74, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x63,
	0x70, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x18, 0xd4,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x63, 0x70, 0x42, 0x61, 0x63, 0x6b, 0x6c, 0x6f,
	0x67, 0x44, 0x72, 0x6f, 0x70, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x63, 0x70, 0x5f, 0x70, 0x66, 0x5f,
	0x6d, 0x65, 0x6d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x18, 0xd5, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x74, 0x63, 0x70, 0x50, 0x66, 0x4d, 0x65, 0x6d, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x44, 0x72, 0x6f, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x63, 0x70, 0x5f, 0x6d,
	0x69, 0x6e, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x18, 0xd6, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x74, 0x63, 0x70, 0x4d, 0x69, 0x6e, 0x54, 0x74, 0x6c, 0x44, 0x72, 0x6f,
	0x70, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x63, 0x70, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x72, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x18, 0xd7, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x12, 0x74, 0x63, 0x70, 0x44, 0x65, 0x66, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x44, 0x72, 0x6f, 0x70, 0x12, 0x3b, 0x0a, 0x1a, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x70, 0x5f,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0xd8, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x74, 0x63, 0x70, 0x49,
	0x70, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x61, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x63, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77,
	0x61, 0x69, 0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0xd9, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x13, 0x74, 0x63, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x61, 0x69, 0x74,
	0x4f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x38, 0x0a, 0x19, 0x74, 0x63, 0x70, 0x5f,
	0x72, 0x65, 0x71, 0x5f, 0x71, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x64, 0x6f, 0x5f, 0x63, 0x6f,
	0x6f, 0x6b, 0x69, 0x65, 0x73, 0x18, 0xda, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x74, 0x63,
	0x70, 0x52, 0x65, 0x71, 0x51, 0x46, 0x75, 0x6c, 0x6c, 0x44, 0x6f, 0x43, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x74, 0x63, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x71, 0x5f,
	0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x18, 0xdb, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x74, 0x63, 0x70, 0x52, 0x65, 0x71, 0x51, 0x46, 0x75, 0x6c, 0x6c, 0x44, 0x72, 0x6f,
	0x70, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x63, 0x70, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x5f, 0x66, 0x61, 0x69, 0x6c, 0x18, 0xdc, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x63,
	0x70, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x12, 0x29, 0x0a, 0x10,
	0x74, 0x63, 0x70, 0x5f, 0x72, 0x63, 0x76, 0x5f, 0x63, 0x6f, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x65,
	0x18, 0xdd, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x63, 0x70, 0x52, 0x63, 0x76, 0x43,
	0x6f, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x63, 0x70, 0x5f, 0x6f,
	0x66, 0x6f, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0xde, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x74, 0x63, 0x70, 0x4f, 0x66, 0x6f, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x63, 0x70, 0x5f, 0x6f, 0x66, 0x6f, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x18, 0xdf, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x63, 0x70, 0x4f, 0x66, 0x6f, 0x44, 0x72, 0x6f, 0x70, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x63, 0x70, 0x5f, 0x6f, 0x66, 0x6f, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x18, 0xe0, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x63, 0x70, 0x4f, 0x66, 0x6f, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x63, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0xe1, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x74, 0x63, 0x70, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x41, 0x63,
	0x6b, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x63, 0x70, 0x5f, 0x73, 0x79, 0x6e, 0x5f, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0xe2, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74,
	0x63, 0x70, 0x53, 0x79, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x30,
	0x0a, 0x14, 0x74, 0x63, 0x70, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0xe3, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x74,
	0x63, 0x70, 0x46, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x39, 0x0a, 0x19, 0x74, 0x63, 0x70, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x18, 0xe4, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x74, 0x63, 0x70, 0x46, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x65,
	0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x74,
	0x63, 0x70, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x61, 0x73,
	0x73, 0x69, 0x76, 0x65, 0x18, 0xe5, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x74, 0x63, 0x70,
	0x46, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x12,
	0x3b, 0x0a, 0x1a, 0x74, 0x63, 0x70, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x18, 0xe6, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x74, 0x63, 0x70, 0x46, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x65,
	0x6e, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x12, 0x41, 0x0a, 0x1d,
	0x74, 0x63, 0x70, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0xe7, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x74, 0x63, 0x70, 0x46, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x65,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x12,
	0x39, 0x0a, 0x19, 0x74, 0x63, 0x70, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x64, 0x18, 0xe8, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x15, 0x74, 0x63, 0x70, 0x46, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e,
	0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x65, 0x71, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x63,
	0x70, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x62, 0x6c, 0x61, 0x63,
	0x6b, 0x68, 0x6f, 0x6c, 0x65, 0x18, 0xe9, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x74, 0x63,
	0x70, 0x46, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x68, 0x6f,
	0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x74, 0x63, 0x70, 0x5f, 0x73, 0x70, 0x75, 0x72, 0x69, 0x6f,
	0x75, 0x73, 0x5f, 0x72, 0x74, 0x78, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x18, 0xea, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x74, 0x63, 0x70, 0x53, 0x70,
	0x75, 0x72, 0x69, 0x6f, 0x75, 0x73, 0x52, 0x74, 0x78, 0x48, 0x6f, 0x73, 0x74, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x63, 0x70, 0x5f, 0x62, 0x75, 0x73, 0x79, 0x5f,
	0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0xeb, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x74, 0x63, 0x70, 0x42, 0x75, 0x73, 0x79, 0x50,
	0x6f, 0x6c, 0x6c, 0x52, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10,
	0x74, 0x63, 0x70, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x18, 0xec, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x63, 0x70, 0x41, 0x75, 0x74, 0x6f,
	0x43, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x63, 0x70, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f,
	0x61, 0x64, 0x76, 0x18, 0xed, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x74, 0x63, 0x70, 0x46,
	0x72, 0x6f, 0x6d, 0x5a, 0x65, 0x72, 0x6f, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x41, 0x64, 0x76,
	0x12, 0x33, 0x0a, 0x16, 0x74, 0x63, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x5f,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x61, 0x64, 0x76, 0x18, 0xee, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x12, 0x74, 0x63, 0x70, 0x54, 0x6f, 0x5a, 0x65, 0x72, 0x6f, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x41, 0x64, 0x76, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x63, 0x70, 0x5f, 0x77, 0x61, 0x6e,
	0x74, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x61, 0x64,
	0x76, 0x18, 0xef, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x74, 0x63, 0x70, 0x57, 0x61, 0x6e,
	0x74, 0x5a, 0x65, 0x72, 0x6f, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x41, 0x64, 0x76, 0x12, 0x27,
	0x0a, 0x0f, 0x74, 0x63, 0x70, 0x5f, 0x73, 0x79, 0x6e, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x18, 0xf0, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x63, 0x70, 0x53, 0x79, 0x6e,
	0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x63, 0x70, 0x5f, 0x6f,
	0x72, 0x69, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0xf1, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x63, 0x70, 0x4f, 0x72, 0x69, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x63, 0x70, 0x5f, 0x68, 0x79, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x18, 0xf2, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x74, 0x63, 0x70, 0x48, 0x79, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x12,
	0x34, 0x0a, 0x16, 0x74, 0x63, 0x70, 0x5f, 0x68, 0x79, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x77, 0x6e, 0x64, 0x18, 0xf3, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x13, 0x74, 0x63, 0x70, 0x48, 0x79, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x69,
	0x6e, 0x43, 0x77, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x63, 0x70, 0x5f, 0x68, 0x79, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x18, 0xf4, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x74, 0x63, 0x70, 0x48, 0x79, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x12,
	0x34, 0x0a, 0x16, 0x74, 0x63, 0x70, 0x5f, 0x68, 0x79, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x77, 0x6e, 0x64, 0x18, 0xf5, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x13, 0x74, 0x63, 0x70, 0x48, 0x79, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x43, 0x77, 0x6e, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x63, 0x70, 0x5f, 0x61, 0x63, 0x6b,
	0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x73, 0x79, 0x6e, 0x5f, 0x72, 0x65, 0x63,
	0x76, 0x18, 0xf6, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x74, 0x63, 0x70, 0x41, 0x63, 0x6b,
	0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x53, 0x79, 0x6e, 0x52, 0x65, 0x63, 0x76, 0x12, 0x30,
	0x0a, 0x14, 0x74, 0x63, 0x70, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x5f, 0x70, 0x61, 0x77, 0x73, 0x18, 0xf7, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x74,
	0x63, 0x70, 0x41, 0x63, 0x6b, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x50, 0x61, 0x77, 0x73,
	0x12, 0x2e, 0x0a, 0x13, 0x74, 0x63, 0x70, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x6b, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x18, 0xf8, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10,
	0x74, 0x63, 0x70, 0x41, 0x63, 0x6b, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x53, 0x65, 0x71,
	0x12, 0x39, 0x0a, 0x19, 0x74, 0x63, 0x70, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x6b, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6e, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x32, 0x18, 0xf9, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x74, 0x63, 0x70, 0x41, 0x63, 0x6b, 0x53, 0x6b, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x46, 0x69, 0x6e, 0x57, 0x61, 0x69, 0x74, 0x32, 0x12, 0x39, 0x0a, 0x19, 0x74,
	0x63, 0x70, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x18, 0xfa, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x15, 0x74, 0x63, 0x70, 0x41, 0x63, 0x6b, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x57, 0x61, 0x69, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x74, 0x63, 0x70, 0x5f, 0x61, 0x63,
	0x6b, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x18, 0xfb, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x74, 0x63, 0x70, 0x41,
	0x63, 0x6b, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x63, 0x70, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x18, 0xfc, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x63, 0x70, 0x57,
	0x69, 0x6e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x63, 0x70, 0x5f, 0x6b,
	0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0xfd, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x74, 0x63, 0x70, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x74, 0x63, 0x70, 0x5f, 0x6d, 0x74, 0x75, 0x70, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x18,
	0xfe, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x63, 0x70, 0x4d, 0x74, 0x75, 0x70, 0x46,
	0x61, 0x69, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x63, 0x70, 0x5f, 0x6d, 0x74, 0x75, 0x70, 0x5f,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0xff, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x74, 0x63, 0x70, 0x4d, 0x74, 0x75, 0x70, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x74, 0x63, 0x70, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18,
	0x80, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x63, 0x70, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x63, 0x70, 0x5f, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x18, 0x81, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x74, 0x63, 0x70, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x43, 0x65, 0x12,
	0x2d, 0x0a, 0x12, 0x74, 0x63, 0x70, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x82, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x63,
	0x70, 0x41, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x30,
	0x0a, 0x14, 0x74, 0x63, 0x70, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x18, 0x83, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x74,
	0x63, 0x70, 0x5a, 0x65, 0x72, 0x6f, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x44, 0x72, 0x6f, 0x70,
	0x12, 0x24, 0x0a, 0x0e, 0x74, 0x63, 0x70, 0x5f, 0x72, 0x63, 0x76, 0x5f, 0x71, 0x5f, 0x64, 0x72,
	0x6f, 0x70, 0x18, 0x84, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x63, 0x70, 0x52, 0x63,
	0x76, 0x51, 0x44, 0x72, 0x6f, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x63, 0x70, 0x5f, 0x77, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x6f, 0x6f, 0x5f, 0x62, 0x69, 0x67, 0x18, 0x85, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x63, 0x70, 0x57, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x6f,
	0x6f, 0x42, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x1d, 0x74, 0x63, 0x70, 0x5f, 0x66, 0x61, 0x73, 0x74,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6c,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x86, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x74, 0x63,
	0x70, 0x46, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65,
	0x41, 0x6c, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x63, 0x70, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x68, 0x61, 0x73, 0x68, 0x18, 0x87, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x63, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52,
	0x65, 0x68, 0x61, 0x73, 0x68, 0x12, 0x3a, 0x0a, 0x19, 0x74, 0x63, 0x70, 0x5f, 0x64, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x88, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x74, 0x63, 0x70, 0x44, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x68, 0x61, 0x73,
	0x68, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x63, 0x70, 0x5f, 0x64, 0x73, 0x61, 0x63, 0x6b, 0x5f, 0x72,
	0x65, 0x63, 0x76, 0x5f, 0x73, 0x65, 0x67, 0x73, 0x18, 0x89, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x74, 0x63, 0x70, 0x44, 0x73, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x76, 0x53, 0x65, 0x67,
	0x73, 0x12, 0x3a, 0x0a, 0x19, 0x74, 0x63, 0x70, 0x5f, 0x64, 0x73, 0x61, 0x63, 0x6b, 0x5f, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x62, 0x69, 0x6f, 0x75, 0x73, 0x18, 0x8a,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x74, 0x63, 0x70, 0x44, 0x73, 0x61, 0x63, 0x6b, 0x49,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x44, 0x75, 0x62, 0x69, 0x6f, 0x75, 0x73, 0x12, 0x36, 0x0a,
	0x17, 0x74, 0x63, 0x70, 0x5f, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x8b, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x14, 0x74, 0x63, 0x70, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x63, 0x70, 0x5f, 0x6d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x18, 0x8c, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x74, 0x63, 0x70, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x74, 0x63, 0x70, 0x5f, 0x70, 0x6c, 0x62, 0x5f, 0x72, 0x65, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x8d, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x63, 0x70, 0x50, 0x6c, 0x62, 0x52, 0x65,
	0x68, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x5f,
	0x6d, 0x73, 0x67, 0x73, 0x18, 0xbc, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x69, 0x63, 0x6d,
	0x70, 0x49, 0x6e, 0x4d, 0x73, 0x67, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x63, 0x6d, 0x70, 0x5f,
	0x69, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xbd, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x69, 0x63, 0x6d, 0x70, 0x49, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x2e,
	0x0a, 0x13, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x73, 0x75, 0x6d, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xbe, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x69, 0x63,
	0x6d, 0x70, 0x49, 0x6e, 0x43, 0x73, 0x75, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x32,
	0x0a, 0x15, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x75,
	0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x73, 0x18, 0xbf, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12,
	0x69, 0x63, 0x6d, 0x70, 0x49, 0x6e, 0x44, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x63,
	0x68, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x65, 0x78, 0x63, 0x64, 0x73, 0x18, 0xc0, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x69, 0x63, 0x6d, 0x70, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x63, 0x64, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x6d,
	0x5f, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x18, 0xc1, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x69,
	0x63, 0x6d, 0x70, 0x49, 0x6e, 0x50, 0x61, 0x72, 0x6d, 0x50, 0x72, 0x6f, 0x62, 0x73, 0x12, 0x2e,
	0x0a, 0x13, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x68, 0x73, 0x18, 0xc2, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x69, 0x63,
	0x6d, 0x70, 0x49, 0x6e, 0x53, 0x72, 0x63, 0x51, 0x75, 0x65, 0x6e, 0x63, 0x68, 0x73, 0x12, 0x2b,
	0x0a, 0x11, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x73, 0x18, 0xc3, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x69, 0x63, 0x6d, 0x70,
	0x49, 0x6e, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x63, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x65, 0x63, 0x68, 0x6f, 0x73, 0x18, 0xc4, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x69, 0x63, 0x6d, 0x70, 0x49, 0x6e, 0x45, 0x63, 0x68, 0x6f, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x65, 0x63, 0x68, 0x6f,
	0x5f, 0x72, 0x65, 0x70, 0x73, 0x18, 0xc5, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x69, 0x63,
	0x6d, 0x70, 0x49, 0x6e, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x70, 0x73, 0x12, 0x2d, 0x0a, 0x12,
	0x69, 0x63, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x73, 0x18, 0xc6, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x69, 0x63, 0x6d, 0x70, 0x49,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x69,
	0x63, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x5f, 0x72, 0x65, 0x70, 0x73, 0x18, 0xc7, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x69, 0x63,
	0x6d, 0x70, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x70,
	0x73, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x73, 0x18, 0xc8, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x69, 0x63, 0x6d, 0x70, 0x49, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x4d, 0x61, 0x73, 0x6b, 0x73, 0x12,
	0x33, 0x0a, 0x16, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x70, 0x73, 0x18, 0xc9, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x12, 0x69, 0x63, 0x6d, 0x70, 0x49, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x4d, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x70, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x6f, 0x75, 0x74,
	0x5f, 0x6d, 0x73, 0x67, 0x73, 0x18, 0xca, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x69, 0x63,
	0x6d, 0x70, 0x4f, 0x75, 0x74, 0x4d, 0x73, 0x67, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x63, 0x6d,
	0x70, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xcb, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x69, 0x63, 0x6d, 0x70, 0x4f, 0x75, 0x74, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x18, 0xcc, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x69, 0x63, 0x6d, 0x70, 0x4f, 0x75, 0x74,
	0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12,
	0x37, 0x0a, 0x18, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0xcd, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x14, 0x69, 0x63, 0x6d, 0x70, 0x4f, 0x75, 0x74, 0x52, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x63, 0x6d, 0x70,
	0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63,
	0x68, 0x73, 0x18, 0xce, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x69, 0x63, 0x6d, 0x70, 0x4f,
	0x75, 0x74, 0x44, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x73, 0x12, 0x2e,
	0x0a, 0x13, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x65, 0x78, 0x63, 0x64, 0x73, 0x18, 0xcf, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x69, 0x63,
	0x6d, 0x70, 0x4f, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x63, 0x64, 0x73, 0x12, 0x2e,
	0x0a, 0x13, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x6d, 0x5f,
	0x70, 0x72, 0x6f, 0x62, 0x73, 0x18, 0xd0, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x69, 0x63,
	0x6d, 0x70, 0x4f, 0x75, 0x74, 0x50, 0x61, 0x72, 0x6d, 0x50, 0x72, 0x6f, 0x62, 0x73, 0x12, 0x30,
	0x0a, 0x14, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x68, 0x73, 0x18, 0xd1, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x69,
	0x63, 0x6d, 0x70, 0x4f, 0x75, 0x74, 0x53, 0x72, 0x63, 0x51, 0x75, 0x65, 0x6e, 0x63, 0x68, 0x73,
	0x12, 0x2d, 0x0a, 0x12, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x18, 0xd2, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x69,
	0x63, 0x6d, 0x70, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x65, 0x63, 0x68, 0x6f,
	0x73, 0x18, 0xd3, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x69, 0x63, 0x6d, 0x70, 0x4f, 0x75,
	0x74, 0x45, 0x63, 0x68, 0x6f, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x6f,
	0x75, 0x74, 0x5f, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x73, 0x18, 0xd4, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x69, 0x63, 0x6d, 0x70, 0x4f, 0x75, 0x74, 0x45, 0x63, 0x68, 0x6f,
	0x52, 0x65, 0x70, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x6f, 0x75, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0xd5, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x11, 0x69, 0x63, 0x6d, 0x70, 0x4f, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x6f, 0x75,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x72, 0x65, 0x70, 0x73,
	0x18, 0xd6, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x69, 0x63, 0x6d, 0x70, 0x4f, 0x75, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x70, 0x73, 0x12, 0x2e, 0x0a,
	0x13, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x73, 0x18, 0xd7, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x69, 0x63, 0x6d,
	0x70, 0x4f, 0x75, 0x74, 0x41, 0x64, 0x64, 0x72, 0x4d, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x35, 0x0a,
	0x17, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x70, 0x73, 0x18, 0xd8, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x13, 0x69, 0x63, 0x6d, 0x70, 0x4f, 0x75, 0x74, 0x41, 0x64, 0x64, 0x72, 0x4d, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x70, 0x73, 0x2a, 0x27, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x43, 0x50, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4e,
	0x49, 0x43, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x45, 0x54, 0x10, 0x02, 0x2a, 0xeb, 0x01,
	0x0a, 0x0b, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x13, 0x0a,
	0x0f, 0x54, 0x43, 0x50, 0x5f, 0x45, 0x53, 0x54, 0x41, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x43, 0x50, 0x5f, 0x53, 0x59, 0x4e, 0x5f, 0x53, 0x45,
	0x4e, 0x54, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x43, 0x50, 0x5f, 0x53, 0x59, 0x4e, 0x5f,
	0x52, 0x45, 0x43, 0x56, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x43, 0x50, 0x5f, 0x46, 0x49,
	0x4e, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x31, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x43, 0x50,
	0x5f, 0x46, 0x49, 0x4e, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x32, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d,
	0x54, 0x43, 0x50, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x10, 0x05, 0x12,
	0x0d, 0x0a, 0x09, 0x54, 0x43, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x06, 0x12, 0x12,
	0x0a, 0x0e, 0x54, 0x43, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x57, 0x41, 0x49, 0x54,
	0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x43, 0x50, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x41,
	0x43, 0x4b, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x43, 0x50, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x45, 0x4e, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x43, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x53,
	0x49, 0x4e, 0x47, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x43, 0x50, 0x5f, 0x4e, 0x45, 0x57,
	0x5f, 0x53, 0x59, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x56, 0x10, 0x0b, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_proto_tcpmon_proto_rawDescOnce sync.Once
	file_proto_tcpmon_proto_rawDescData = file_proto_tcpmon_proto_rawDesc
)

func file_proto_tcpmon_proto_rawDescGZIP() []byte {
	file_proto_tcpmon_proto_rawDescOnce.Do(func() {
		file_proto_tcpmon_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_tcpmon_proto_rawDescData)
	})
	return file_proto_tcpmon_proto_rawDescData
}

var file_proto_tcpmon_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_tcpmon_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_proto_tcpmon_proto_goTypes = []interface{}{
	(MetricType)(0),           // 0: MetricType
	(SocketState)(0),          // 1: SocketState
	(*Metric)(nil),            // 2: Metric
	(*SocketMemoryUsage)(nil), // 3: SocketMemoryUsage
	(*TimerInfo)(nil),         // 4: TimerInfo
	(*ProcessInfo)(nil),       // 5: ProcessInfo
	(*SocketMetric)(nil),      // 6: SocketMetric
	(*TcpMetric)(nil),         // 7: TcpMetric
	(*IfaceMetric)(nil),       // 8: IfaceMetric
	(*NicMetric)(nil),         // 9: NicMetric
	(*NetstatMetric)(nil),     // 10: NetstatMetric
}
var file_proto_tcpmon_proto_depIdxs = []int32{
	7,  // 0: Metric.tcp:type_name -> TcpMetric
	9,  // 1: Metric.nic:type_name -> NicMetric
	10, // 2: Metric.net:type_name -> NetstatMetric
	1,  // 3: SocketMetric.state:type_name -> SocketState
	5,  // 4: SocketMetric.processes:type_name -> ProcessInfo
	4,  // 5: SocketMetric.timers:type_name -> TimerInfo
	3,  // 6: SocketMetric.skmem:type_name -> SocketMemoryUsage
	0,  // 7: TcpMetric.type:type_name -> MetricType
	6,  // 8: TcpMetric.sockets:type_name -> SocketMetric
	0,  // 9: NicMetric.type:type_name -> MetricType
	8,  // 10: NicMetric.ifaces:type_name -> IfaceMetric
	0,  // 11: NetstatMetric.type:type_name -> MetricType
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_proto_tcpmon_proto_init() }
func file_proto_tcpmon_proto_init() {
	if File_proto_tcpmon_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_tcpmon_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tcpmon_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SocketMemoryUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tcpmon_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tcpmon_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tcpmon_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SocketMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tcpmon_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcpMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tcpmon_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IfaceMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tcpmon_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NicMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tcpmon_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetstatMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_tcpmon_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Metric_Tcp)(nil),
		(*Metric_Nic)(nil),
		(*Metric_Net)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_tcpmon_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_tcpmon_proto_goTypes,
		DependencyIndexes: file_proto_tcpmon_proto_depIdxs,
		EnumInfos:         file_proto_tcpmon_proto_enumTypes,
		MessageInfos:      file_proto_tcpmon_proto_msgTypes,
	}.Build()
	File_proto_tcpmon_proto = out.File
	file_proto_tcpmon_proto_rawDesc = nil
	file_proto_tcpmon_proto_goTypes = nil
	file_proto_tcpmon_proto_depIdxs = nil
}
