syntax = "proto3";

import "google/protobuf/timestamp.proto";

enum MetricType {
  TCP = 0;
  NIC = 1;
  NET = 2;
}

// from linux/include/net/tcp_states.h
enum SocketState {
  TCP_ESTABLISHED = 0;
  TCP_SYN_SENT = 1;
  TCP_SYN_RECV = 2;
  TCP_FIN_WAIT1 = 3;
  TCP_FIN_WAIT2 = 4;
  TCP_TIME_WAIT = 5;
  TCP_CLOSE = 6;
  TCP_CLOSE_WAIT = 7;
  TCP_LAST_ACK = 8;
  TCP_LISTEN = 9;
  TCP_CLOSING = 10;
  TCP_NEW_SYN_RECV = 11;
}

// Socket memory usage. aka skmem
// check: https://man7.org/linux/man-pages/man8/ss.8.html
message SocketMemoryUsage {
  uint32 rmem_alloc = 1;  // the memory allocated for receiving packet
  uint32 rcv_buf = 2;     // the total memory can be allocated for receiving packet
  uint32 wmem_alloc = 3;  // the memory used for sending packet (which has been sent to layer 3)
  uint32 snd_buf = 4;     // the total memory can be allocated for sending packet
  uint32 fwd_alloc = 5;   // the memory allocated by the socket as cache, but not used for receiving/sending packet yet.
  uint32 wmem_queued = 6; // The memory allocated for sending packet (which has not been sent to layer 3)
  uint32 opt_mem = 7;     // The memory used for storing socket option, e.g., the key for TCP MD5 signature
  uint32 back_log = 8;    // The memory used for the sk backlog queue
  uint32 sock_drop = 9;   // the number of packets dropped before they are de-multiplexed into the socket
}

message TimerInfo {
  string name = 1; // the name of timer
  uint32 expire_time_sec = 2;
  uint32 retrans = 3;
}

message ProcessInfo {
  string name = 1;
  uint32 pid = 2;
  uint32 fd = 3;
}

message SocketMetric {
  SocketState state = 3;
  uint32 recv_q = 4;
  uint32 send_q = 5;
  string local_addr = 6;
  string peer_addr = 7;

  repeated ProcessInfo users = 8;
  repeated TimerInfo timers = 9;
  SocketMemoryUsage skmem = 10;

  bool ts = 11;
  bool sack = 12;
  bool cubic = 13;
  bool app_limited = 14;

  uint64 pacing_rate = 15;
  uint64 delivery_rate = 16;
  uint64 send = 17;

  uint32 snd_wscale = 18; // window scaling
  uint32 rcv_wscale = 19;
  double rto = 20;
  double rtt = 21;
  double rttvar = 22;
  double minrtt = 23;
  double rcv_rtt = 24;
  uint32 retrans_now = 25;
  uint32 retrans_total = 26;

  uint32 ato = 30;
  uint32 mss = 31;
  uint32 pmtu = 32;
  uint32 rcvmss = 33;
  uint32 advmss = 34;
  uint32 cwnd = 35;
  uint32 snd_wnd = 36;
  uint32 bytes_sent = 37;
  uint32 bytes_acked = 38;
  uint32 bytes_received = 39;
  uint32 segs_out = 40;
  uint32 segs_in = 41;
  uint32 lastsnd = 42;
  uint32 lastrcv = 43;
  uint32 lastack = 44;
  uint32 delivered = 45;
  uint32 busy_ms = 46;
  uint32 rcv_space = 47;
  uint32 rcv_ssthresh = 48;
  uint32 data_segs_out = 49;
  uint32 data_segs_in = 50;
}

message TcpMetric {
  // header
  google.protobuf.Timestamp timestamp = 1;
  MetricType type = 2;
  // fields
  repeated SocketMetric sockets = 3;
}

message IfaceMetric {
  string name = 1;
  uint32 rx_errors = 2;
  uint32 rx_dropped = 3;
  uint32 rx_overruns = 4;
  uint32 rx_frame = 5;
  uint32 tx_errors = 6;
  uint32 tx_dropped = 7;
  uint32 tx_overruns = 8;
  uint32 tx_carrier = 9;
  uint32 tx_collisions = 10;
}

message NicMetric {
  // header
  google.protobuf.Timestamp timestamp = 1;
  MetricType type = 2;
  // fields
  repeated IfaceMetric ifaces = 3;
}

message NetstatMetric {
  // header
  google.protobuf.Timestamp timestamp = 1;
  MetricType type = 2;
  // fields
  uint32 ip_total_packets_received = 3;
  uint32 ip_forwarded = 4;
  uint32 ip_incoming_packets_discarded = 5;
  uint32 ip_incoming_packets_delivered = 6;
  uint32 ip_requests_sent_out = 7;
  uint32 ip_outgoing_packets_dropped = 8;

  uint32 tcp_active_connections_openings = 9;
  uint32 tcp_passive_connection_openings = 10;
  uint32 tcp_failed_connection_attempts = 11;
  uint32 tcp_connection_resets_received = 12;
  uint32 tcp_connections_established = 13;
  uint32 tcp_segments_received = 14;
  uint32 tcp_segments_send_out = 15;
  uint32 tcp_segments_retransmitted = 16;
  uint32 tcp_bad_segments_received = 17;
  uint32 tcp_resets_sent = 18;

  uint32 udp_packets_received = 19;
  uint32 udp_packets_to_unknown_port_received = 20;
  uint32 udp_packet_receive_errors = 21;
  uint32 udp_packets_sent = 22;
  uint32 udp_receive_buffer_errors = 23;
  uint32 udp_send_buffer_errors = 24;
}
