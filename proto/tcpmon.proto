syntax = "proto3";

message Metric {
  oneof body {
    TcpMetric tcp = 1;
    NicMetric nic = 2;
    NetstatMetric net = 3;
  }
}

enum MetricType {
  TCP = 0;
  NIC = 1;
  NET = 2;
}

// from linux/include/net/tcp_states.h
enum SocketState {
  TCP_ESTABLISHED = 0;
  TCP_SYN_SENT = 1;
  TCP_SYN_RECV = 2;
  TCP_FIN_WAIT1 = 3;
  TCP_FIN_WAIT2 = 4;
  TCP_TIME_WAIT = 5;
  TCP_CLOSE = 6;
  TCP_CLOSE_WAIT = 7;
  TCP_LAST_ACK = 8;
  TCP_LISTEN = 9;
  TCP_CLOSING = 10;
  TCP_NEW_SYN_RECV = 11;
}

// Socket memory usage. aka skmem
// check: https://man7.org/linux/man-pages/man8/ss.8.html
message SocketMemoryUsage {
  uint32 rmem_alloc = 1;  // the memory allocated for receiving packet
  uint32 rcv_buf = 2;     // the total memory can be allocated for receiving packet
  uint32 wmem_alloc = 3;  // the memory used for sending packet (which has been sent to layer 3)
  uint32 snd_buf = 4;     // the total memory can be allocated for sending packet
  uint32 fwd_alloc = 5;   // the memory allocated by the socket as cache, but not used for receiving/sending packet yet.
  uint32 wmem_queued = 6; // The memory allocated for sending packet (which has not been sent to layer 3)
  uint32 opt_mem = 7;     // The memory used for storing socket option, e.g., the key for TCP MD5 signature
  uint32 back_log = 8;    // The memory used for the sk backlog queue
  uint32 sock_drop = 9;   // the number of packets dropped before they are de-multiplexed into the socket
}

message TimerInfo {
  string name = 1; // the name of timer
  uint64 expire_time_us = 2;
  uint32 retrans = 3;
}

message ProcessInfo {
  string name = 1;
  uint32 pid = 2;
  uint32 fd = 3;
}

message SocketMetric {
  SocketState state = 3;
  uint32 recv_q = 4;
  int64 send_q = 5;
  string local_addr = 6;
  string peer_addr = 7;

  repeated ProcessInfo processes = 8;
  repeated TimerInfo timers = 9;
  SocketMemoryUsage skmem = 10;

  bool ts = 11;
  bool sack = 12;
  bool cubic = 13;
  bool app_limited = 14;

  double pacing_rate = 15;
  double delivery_rate = 16;
  double send = 17;

  uint32 snd_wscale = 18; // window scaling
  uint32 rcv_wscale = 19;
  double rto = 20;
  double rtt = 21;
  double rttvar = 22;
  double minrtt = 23;
  double rcv_rtt = 24;
  uint32 retrans_now = 25;
  uint32 retrans_total = 26;

  double ato = 30;
  uint32 mss = 31;
  uint32 pmtu = 32;
  uint32 rcvmss = 33;
  uint32 advmss = 34;
  uint32 cwnd = 35;
  uint32 snd_wnd = 36;
  uint32 bytes_sent = 37;
  uint64 bytes_acked = 38;
  uint64 bytes_received = 39;
  uint32 segs_out = 40;
  uint32 segs_in = 41;
  uint32 lastsnd = 42;
  uint32 lastrcv = 43;
  uint32 lastack = 44;
  uint32 delivered = 45;
  uint32 busy_ms = 46;
  uint32 rcv_space = 47;
  uint32 rcv_ssthresh = 48;
  uint32 data_segs_out = 49;
  uint32 data_segs_in = 50;
  uint32 rwnd_limited = 51;
  uint32 sndbuf_limited = 52;

  bool ecn = 53;
  bool ecnseen = 54;
}

message TcpMetric {
  // header
  int64 timestamp = 1;
  MetricType type = 2;
  // fields
  repeated SocketMetric sockets = 3;
}

message IfaceMetric {
  string name = 1;
  uint64 rx_errors = 2;
  uint64 rx_dropped = 3;
  uint64 rx_overruns = 4;
  uint64 rx_frame = 5;
  uint64 tx_errors = 6;
  uint64 tx_dropped = 7;
  uint64 tx_overruns = 8;
  uint64 tx_carrier = 9;
  uint64 tx_collisions = 10;
}

message NicMetric {
  // header
  int64 timestamp = 1;
  MetricType type = 2;
  // fields
  repeated IfaceMetric ifaces = 3;
}

message NetstatMetric {
  // header
  int64 timestamp = 1;
  MetricType type = 2;
  // fields
  // Ip
  uint64 ip_total_packets_received = 3;
  uint64 ip_forwarded = 4;
  uint64 ip_incoming_packets_discarded = 5;
  uint64 ip_incoming_packets_delivered = 6;
  uint64 ip_requests_sent_out = 7;
  uint64 ip_outgoing_packets_dropped = 8;
  uint64 ip_dropped_because_of_missing_route = 9;
  uint64 ip_fragments_dropped_after_timeout = 10;
  uint64 ip_reassemblies_required = 11;
  uint64 ip_packets_reassembled_ok = 12;
  uint64 ip_packet_reassembles_failed = 13;
  // Tcp
  uint64 tcp_active_connections_openings = 14;
  uint64 tcp_passive_connection_openings = 15;
  uint64 tcp_failed_connection_attempts = 16;
  uint64 tcp_connection_resets_received = 17;
  uint64 tcp_connections_established = 18;
  uint64 tcp_segments_received = 19;
  uint64 tcp_segments_send_out = 20;
  uint64 tcp_segments_retransmitted = 21;
  uint64 tcp_bad_segments_received = 22;
  uint64 tcp_resets_sent = 23;
  // Udp
  uint64 udp_packets_received = 24;
  uint64 udp_packets_to_unknown_port_received = 25;
  uint64 udp_packet_receive_errors = 26;
  uint64 udp_packets_sent = 27;
  uint64 udp_receive_buffer_errors = 28;
  uint64 udp_send_buffer_errors = 29;
  uint64 udp_ignored_multi = 30;
  // TcpExt
  uint64 tcpext_invalid_syn_cookies_received = 31;
  uint64 tcpext_resets_received_for_embryonic_syn_recv_sockets = 32;
  uint64 tcpext_icmp_packets_dropped_because_they_were_out_of_window = 33;
  uint64 tcpext_icmp_packets_dropped_because_socket_was_locked = 34;
  uint64 tcpext_tcp_sockets_finished_time_wait_in_fast_timer = 35;
  uint64 tcpext_packets_rejects_in_established_connections_because_of_timestamp = 36;
  uint64 tcpext_delayed_acks_sent = 37;
  uint64 tcpext_delayed_acks_further_delayed_because_of_locked_socket = 38;
  uint64 tcpext_quick_ack_mode_was_activated_times = 39;
  uint64 tcpext_times_the_listen_queue_of_a_socket_overflowed = 40;
  uint64 tcpext_syns_to_listen_sockets_dropped = 41;
  uint64 tcpext_packet_headers_predicted = 42;
  uint64 tcpext_acknowledgments_not_containing_data_payload_received = 43;
  uint64 tcpext_predicted_acknowledgments = 44;
  uint64 tcpext_times_recovered_from_packet_loss_by_selective_acknowledgements = 45;
  uint64 tcpext_detected_reordering_times_using_sack = 46;
  uint64 tcpext_congestion_windows_fully_recovered_without_slow_start = 47;
  uint64 tcpext_congestion_windows_recovered_without_slow_start_by_dsack = 48;
  uint64 tcpext_congestion_windows_recovered_without_slow_start_after_partial_ack = 49;
  uint64 tcpext_tcp_lost_retransmit = 50;
  uint64 tcpext_timeouts_after_sack_recovery = 51;
  uint64 tcpext_timeouts_in_loss_state = 52;
  uint64 tcpext_fast_retransmits = 53;
  uint64 tcpext_retransmits_in_slow_start = 54;
  uint64 tcpext_other_tcp_timeouts = 55;
  uint64 tcpext_tcp_loss_probes = 56;
  uint64 tcpext_tcp_loss_probe_recovery = 57;
  uint64 tcpext_sack_retransmits_failed = 58;
  uint64 tcpext_tcp_backlog_coalesce = 59;
  uint64 tcpext_dsacks_sent_for_old_packets = 60;
  uint64 tcpext_dsacks_sent_for_out_of_order_packets = 61;
  uint64 tcpext_dsacks_received = 62;
  uint64 tcpext_dsacks_for_out_of_order_packets_received = 63;
  uint64 tcpext_connections_reset_due_to_unexpected_data = 64;
  uint64 tcpext_connections_reset_due_to_early_user_close = 65;
  uint64 tcpext_connections_aborted_due_to_timeout = 66;
  uint64 tcpext_tcp_dsack_ignored_old = 67;
  uint64 tcpext_tcp_dsack_ignored_no_undo = 68;
  uint64 tcpext_tcp_spurious_rtos = 69;
  uint64 tcpext_tcp_sack_merged = 70;
  uint64 tcpext_tcp_sack_shift_fallback = 71;
  uint64 tcpext_ip_reverse_path_filter = 72;
  uint64 tcpext_tcp_retrans_fail = 73;
  uint64 tcpext_tcp_rcv_coalesce = 74;
  uint64 tcpext_tcp_ofo_queue = 75;
  uint64 tcpext_tcp_ofo_merge = 76;
  uint64 tcpext_tcp_challenge_ack = 77;
  uint64 tcpext_tcp_syn_challenge = 78;
  uint64 tcpext_tcp_fast_open_active_fail = 79;
  uint64 tcpext_tcp_fast_open_cookie_reqd = 80;
  uint64 tcpext_tcp_fast_open_blackhole = 81;
  uint64 tcpext_tcp_spurious_rtx_host_queues = 82;
  uint64 tcpext_tcp_auto_corking = 83;
  uint64 tcpext_tcp_syn_retrans = 84;
  uint64 tcpext_tcp_orig_data_sent = 85;
  uint64 tcpext_tcp_hystart_train_detect = 86;
  uint64 tcpext_tcp_hystart_train_cwnd = 87;
  uint64 tcpext_tcp_hystart_delay_detect = 88;
  uint64 tcpext_tcp_hystart_delay_cwnd = 89;
  uint64 tcpext_tcp_ack_skipped_seq = 90;
  uint64 tcpext_tcp_ack_skipped_challenge = 91;
  uint64 tcpext_tcp_keep_alive = 92;
  uint64 tcpext_tcp_delivered = 93;
  uint64 tcpext_tcp_ack_compressed = 94;
  // IpExt
  uint64 ipext_in_bcast_pkts = 95;
  uint64 ipext_in_octets = 96;
  uint64 ipext_out_octets = 97;
  uint64 ipext_in_bcast_octets = 98;
  uint64 ipext_in_no_ect_pkts = 99;
  uint64 ipext_in_ect0_pkts = 100;
}
